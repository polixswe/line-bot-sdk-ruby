# This file is auto-generated by the merge script.
# It combines multiple clients into a single aggregator client that delegates each method.

module Line
  module Bot
    module V2
      class AllInOneClient
        # Initializes a new AllInOneClient
        #
        # この例では:
        # - base_url, http_options を通常用に
        # - base_url_for_blob, http_options_for_blob を Blob 用に
        # - base_url_for_module_attach, http_options_for_module_attach を ModuleAttach 用に
        # - channel_access_token, channel_id, channel_secret などもまとめて受け取る
        def initialize(
          base_url: nil,
          base_url_for_blob: nil,
          base_url_for_module_attach: nil,
          channel_access_token: nil,
          channel_id: nil,
          channel_secret: nil,
          http_options: {},
          http_options_for_blob: {},
          http_options_for_module_attach: {}
        )
            @channel_access_token_api_client = Line::Bot::V2::ChannelAccessToken::ApiClient.new(base_url: base_url, channel_access_token: channel_access_token, http_options: http_options)
            @http_client = Line::Bot::V2::HttpClient.new(base_url: base_url, channel_access_token: channel_access_token, http_options: http_options)
            @insight_api_client = Line::Bot::V2::Insight::ApiClient.new(base_url: base_url, channel_access_token: channel_access_token, http_options: http_options)
            @liff_api_client = Line::Bot::V2::Liff::ApiClient.new(base_url: base_url, channel_access_token: channel_access_token, http_options: http_options)
            @manage_audience_api_blob_client = Line::Bot::V2::ManageAudience::ApiBlobClient.new(base_url: base_url_for_blob, channel_access_token: channel_access_token, http_options: http_options_for_blob)
            @manage_audience_api_client = Line::Bot::V2::ManageAudience::ApiClient.new(base_url: base_url, channel_access_token: channel_access_token, http_options: http_options)
            @messaging_api_api_blob_client = Line::Bot::V2::MessagingApi::ApiBlobClient.new(base_url: base_url_for_blob, channel_access_token: channel_access_token, http_options: http_options_for_blob)
            @messaging_api_api_client = Line::Bot::V2::MessagingApi::ApiClient.new(base_url: base_url, channel_access_token: channel_access_token, http_options: http_options)
            @module_api_client = Line::Bot::V2::Module::ApiClient.new(base_url: base_url, channel_access_token: channel_access_token, http_options: http_options)
            @module_attach_api_client = Line::Bot::V2::ModuleAttach::ApiClient.new(base_url: base_url_for_module_attach, channel_id: channel_id, channel_secret: channel_secret, http_options: http_options_for_module_attach)
            @shop_api_client = Line::Bot::V2::Shop::ApiClient.new(base_url: base_url, channel_access_token: channel_access_token, http_options: http_options)
        end

          # Gets all valid channel access token key IDs.
          # This requests to <code>GET https://api.line.me/oauth2/v2.1/tokens/kid</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param client_assertion_type [String] `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`
          # @param client_assertion [String] A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-all-valid-channel-access-token-key-ids-v2-1
          # @return [Array(Line::Bot::V2::ChannelAccessToken::ChannelAccessTokenKeyIdsResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def gets_all_valid_channel_access_token_key_ids_with_http_info( # steep:ignore MethodBodyTypeMismatch
            client_assertion_type:,
            client_assertion:
          )
            @channel_access_token_api_client.gets_all_valid_channel_access_token_key_ids_with_http_info(
              client_assertion_type: client_assertion_type,
              client_assertion: client_assertion
            )
          end

          # Gets all valid channel access token key IDs.
          # This requests to <code>GET https://api.line.me/oauth2/v2.1/tokens/kid</code>
          # When you want to get HTTP status code or response headers, use {#gets_all_valid_channel_access_token_key_ids_with_http_info} instead of this.
          #
          # @param client_assertion_type [String] `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`
          # @param client_assertion [String] A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-all-valid-channel-access-token-key-ids-v2-1
          # @return [Line::Bot::V2::ChannelAccessToken::ChannelAccessTokenKeyIdsResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def gets_all_valid_channel_access_token_key_ids(
            client_assertion_type:,
            client_assertion:
          )
            @channel_access_token_api_client.gets_all_valid_channel_access_token_key_ids(
              client_assertion_type: client_assertion_type,
              client_assertion: client_assertion
            )
          end

          # Issue short-lived channel access token
          # This requests to <code>POST https://api.line.me/v2/oauth/accessToken</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param grant_type [String] `client_credentials`
          # @param client_id [String] Channel ID.
          # @param client_secret [String] Channel secret.
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-shortlived-channel-access-token
          # @return [Array(Line::Bot::V2::ChannelAccessToken::IssueShortLivedChannelAccessTokenResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::ChannelAccessToken::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def issue_channel_token_with_http_info( # steep:ignore MethodBodyTypeMismatch
            grant_type:,
            client_id:,
            client_secret:
          )
            @channel_access_token_api_client.issue_channel_token_with_http_info(
              grant_type: grant_type,
              client_id: client_id,
              client_secret: client_secret
            )
          end

          # Issue short-lived channel access token
          # This requests to <code>POST https://api.line.me/v2/oauth/accessToken</code>
          # When you want to get HTTP status code or response headers, use {#issue_channel_token_with_http_info} instead of this.
          #
          # @param grant_type [String] `client_credentials`
          # @param client_id [String] Channel ID.
          # @param client_secret [String] Channel secret.
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-shortlived-channel-access-token
          # @return [Line::Bot::V2::ChannelAccessToken::IssueShortLivedChannelAccessTokenResponse] when HTTP status code is 200
          # @return [Line::Bot::V2::ChannelAccessToken::ErrorResponse] when HTTP status code is 400
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def issue_channel_token(
            grant_type:,
            client_id:,
            client_secret:
          )
            @channel_access_token_api_client.issue_channel_token(
              grant_type: grant_type,
              client_id: client_id,
              client_secret: client_secret
            )
          end

          # Issues a channel access token that allows you to specify a desired expiration date. This method lets you use JWT assertion for authentication.
          # This requests to <code>POST https://api.line.me/oauth2/v2.1/token</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param grant_type [String] client_credentials
          # @param client_assertion_type [String] urn:ietf:params:oauth:client-assertion-type:jwt-bearer
          # @param client_assertion [String] A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-channel-access-token-v2-1
          # @return [Array(Line::Bot::V2::ChannelAccessToken::IssueChannelAccessTokenResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def issue_channel_token_by_jwt_with_http_info( # steep:ignore MethodBodyTypeMismatch
            grant_type:,
            client_assertion_type:,
            client_assertion:
          )
            @channel_access_token_api_client.issue_channel_token_by_jwt_with_http_info(
              grant_type: grant_type,
              client_assertion_type: client_assertion_type,
              client_assertion: client_assertion
            )
          end

          # Issues a channel access token that allows you to specify a desired expiration date. This method lets you use JWT assertion for authentication.
          # This requests to <code>POST https://api.line.me/oauth2/v2.1/token</code>
          # When you want to get HTTP status code or response headers, use {#issue_channel_token_by_jwt_with_http_info} instead of this.
          #
          # @param grant_type [String] client_credentials
          # @param client_assertion_type [String] urn:ietf:params:oauth:client-assertion-type:jwt-bearer
          # @param client_assertion [String] A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-channel-access-token-v2-1
          # @return [Line::Bot::V2::ChannelAccessToken::IssueChannelAccessTokenResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def issue_channel_token_by_jwt(
            grant_type:,
            client_assertion_type:,
            client_assertion:
          )
            @channel_access_token_api_client.issue_channel_token_by_jwt(
              grant_type: grant_type,
              client_assertion_type: client_assertion_type,
              client_assertion: client_assertion
            )
          end

          # Issues a new stateless channel access token, which doesn't have max active token limit unlike the other token types. The newly issued token is only valid for 15 minutes but can not be revoked until it naturally expires.
          # This requests to <code>POST https://api.line.me/oauth2/v3/token</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param grant_type [String, nil] `client_credentials`
          # @param client_assertion_type [String, nil] URL-encoded value of `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`
          # @param client_assertion [String, nil] A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
          # @param client_id [String, nil] Channel ID.
          # @param client_secret [String, nil] Channel secret.
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-stateless-channel-access-token
          # @return [Array(Line::Bot::V2::ChannelAccessToken::IssueStatelessChannelAccessTokenResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def issue_stateless_channel_token_with_http_info( # steep:ignore MethodBodyTypeMismatch
            grant_type: nil,
            client_assertion_type: nil,
            client_assertion: nil,
            client_id: nil,
            client_secret: nil
          )
            @channel_access_token_api_client.issue_stateless_channel_token_with_http_info(
              grant_type: grant_type,
              client_assertion_type: client_assertion_type,
              client_assertion: client_assertion,
              client_id: client_id,
              client_secret: client_secret
            )
          end

          # Issues a new stateless channel access token, which doesn't have max active token limit unlike the other token types. The newly issued token is only valid for 15 minutes but can not be revoked until it naturally expires.
          # This requests to <code>POST https://api.line.me/oauth2/v3/token</code>
          # When you want to get HTTP status code or response headers, use {#issue_stateless_channel_token_with_http_info} instead of this.
          #
          # @param grant_type [String, nil] `client_credentials`
          # @param client_assertion_type [String, nil] URL-encoded value of `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`
          # @param client_assertion [String, nil] A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
          # @param client_id [String, nil] Channel ID.
          # @param client_secret [String, nil] Channel secret.
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-stateless-channel-access-token
          # @return [Line::Bot::V2::ChannelAccessToken::IssueStatelessChannelAccessTokenResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def issue_stateless_channel_token(
            grant_type: nil,
            client_assertion_type: nil,
            client_assertion: nil,
            client_id: nil,
            client_secret: nil
          )
            @channel_access_token_api_client.issue_stateless_channel_token(
              grant_type: grant_type,
              client_assertion_type: client_assertion_type,
              client_assertion: client_assertion,
              client_id: client_id,
              client_secret: client_secret
            )
          end

          # Revoke short-lived or long-lived channel access token
          # This requests to <code>POST https://api.line.me/v2/oauth/revoke</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param access_token [String] Channel access token
          # @see https://developers.line.biz/en/reference/messaging-api/#revoke-longlived-or-shortlived-channel-access-token
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def revoke_channel_token_with_http_info( # steep:ignore MethodBodyTypeMismatch
            access_token:
          )
            @channel_access_token_api_client.revoke_channel_token_with_http_info(
              access_token: access_token
            )
          end

          # Revoke short-lived or long-lived channel access token
          # This requests to <code>POST https://api.line.me/v2/oauth/revoke</code>
          # When you want to get HTTP status code or response headers, use {#revoke_channel_token_with_http_info} instead of this.
          #
          # @param access_token [String] Channel access token
          # @see https://developers.line.biz/en/reference/messaging-api/#revoke-longlived-or-shortlived-channel-access-token
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def revoke_channel_token(
            access_token:
          )
            @channel_access_token_api_client.revoke_channel_token(
              access_token: access_token
            )
          end

          # Revoke channel access token v2.1
          # This requests to <code>POST https://api.line.me/oauth2/v2.1/revoke</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param client_id [String] Channel ID
          # @param client_secret [String] Channel Secret
          # @param access_token [String] Channel access token
          # @see https://developers.line.biz/en/reference/messaging-api/#revoke-channel-access-token-v2-1
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def revoke_channel_token_by_jwt_with_http_info( # steep:ignore MethodBodyTypeMismatch
            client_id:,
            client_secret:,
            access_token:
          )
            @channel_access_token_api_client.revoke_channel_token_by_jwt_with_http_info(
              client_id: client_id,
              client_secret: client_secret,
              access_token: access_token
            )
          end

          # Revoke channel access token v2.1
          # This requests to <code>POST https://api.line.me/oauth2/v2.1/revoke</code>
          # When you want to get HTTP status code or response headers, use {#revoke_channel_token_by_jwt_with_http_info} instead of this.
          #
          # @param client_id [String] Channel ID
          # @param client_secret [String] Channel Secret
          # @param access_token [String] Channel access token
          # @see https://developers.line.biz/en/reference/messaging-api/#revoke-channel-access-token-v2-1
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def revoke_channel_token_by_jwt(
            client_id:,
            client_secret:,
            access_token:
          )
            @channel_access_token_api_client.revoke_channel_token_by_jwt(
              client_id: client_id,
              client_secret: client_secret,
              access_token: access_token
            )
          end

          # Verify the validity of short-lived and long-lived channel access tokens
          # This requests to <code>POST https://api.line.me/v2/oauth/verify</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param access_token [String] A short-lived or long-lived channel access token.
          # @see https://developers.line.biz/en/reference/messaging-api/#verify-channel-access-token
          # @return [Array(Line::Bot::V2::ChannelAccessToken::VerifyChannelAccessTokenResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def verify_channel_token_with_http_info( # steep:ignore MethodBodyTypeMismatch
            access_token:
          )
            @channel_access_token_api_client.verify_channel_token_with_http_info(
              access_token: access_token
            )
          end

          # Verify the validity of short-lived and long-lived channel access tokens
          # This requests to <code>POST https://api.line.me/v2/oauth/verify</code>
          # When you want to get HTTP status code or response headers, use {#verify_channel_token_with_http_info} instead of this.
          #
          # @param access_token [String] A short-lived or long-lived channel access token.
          # @see https://developers.line.biz/en/reference/messaging-api/#verify-channel-access-token
          # @return [Line::Bot::V2::ChannelAccessToken::VerifyChannelAccessTokenResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def verify_channel_token(
            access_token:
          )
            @channel_access_token_api_client.verify_channel_token(
              access_token: access_token
            )
          end

          # You can verify whether a Channel access token with a user-specified expiration (Channel Access Token v2.1) is valid.
          # This requests to <code>GET https://api.line.me/oauth2/v2.1/verify</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param access_token [String] Channel access token with a user-specified expiration (Channel Access Token v2.1).
          # @see https://developers.line.biz/en/reference/messaging-api/#verify-channel-access-token-v2-1
          # @return [Array(Line::Bot::V2::ChannelAccessToken::VerifyChannelAccessTokenResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def verify_channel_token_by_jwt_with_http_info( # steep:ignore MethodBodyTypeMismatch
            access_token:
          )
            @channel_access_token_api_client.verify_channel_token_by_jwt_with_http_info(
              access_token: access_token
            )
          end

          # You can verify whether a Channel access token with a user-specified expiration (Channel Access Token v2.1) is valid.
          # This requests to <code>GET https://api.line.me/oauth2/v2.1/verify</code>
          # When you want to get HTTP status code or response headers, use {#verify_channel_token_by_jwt_with_http_info} instead of this.
          #
          # @param access_token [String] Channel access token with a user-specified expiration (Channel Access Token v2.1).
          # @see https://developers.line.biz/en/reference/messaging-api/#verify-channel-access-token-v2-1
          # @return [Line::Bot::V2::ChannelAccessToken::VerifyChannelAccessTokenResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def verify_channel_token_by_jwt(
            access_token:
          )
            @channel_access_token_api_client.verify_channel_token_by_jwt(
              access_token: access_token
            )
          end

        # NOTE: line-bot-sdk-ruby users should not use this. Breaking changes may occur, so use at your own risk.
        def get(path:, query_params: nil, headers: nil)
          request = build_request(http_class: Net::HTTP::Get, path: path, query_params: query_params, headers: headers)
          @http_client.get(
          )
        end

        # NOTE: line-bot-sdk-ruby users should not use this. Breaking changes may occur, so use at your own risk.
        def post(path:, query_params: nil, body_params: nil, headers: nil)
          request = build_request(http_class: Net::HTTP::Post, path: path, query_params: query_params, headers: headers, body_params: body_params)
          @http_client.post(
          )
        end

        # NOTE: line-bot-sdk-ruby users should not use this. Breaking changes may occur, so use at your own risk.
        def put(path:, query_params: nil, body_params: nil, headers: nil)
          request = build_request(http_class: Net::HTTP::Put, path: path, query_params: query_params, headers: headers, body_params: body_params)
          @http_client.put(
          )
        end

        # NOTE: line-bot-sdk-ruby users should not use this. Breaking changes may occur, so use at your own risk.
        def delete(path:, query_params: nil, headers: nil)
          request = build_request(http_class: Net::HTTP::Delete, path: path, query_params: query_params, headers: headers)
          @http_client.delete(
          )
        end

        # NOTE: line-bot-sdk-ruby users should not use this. Breaking changes may occur, so use at your own risk.
        def post_form(path:, query_params: nil, form_params: nil, headers: nil)
          request = build_form_request(http_class: Net::HTTP::Post, path: path, query_params: query_params, form_params: form_params, headers: headers)
          @http_client.post_form(
          )
        end

        # NOTE: line-bot-sdk-ruby users should not use this. Breaking changes may occur, so use at your own risk.
        def post_form_multipart(path:, query_params: nil, form_params: nil, headers: nil)
          request = build_multipart_request(http_class: Net::HTTP::Post::Multipart, path: path, query_params: query_params, form_params: form_params, headers: headers)
          @http_client.post_form_multipart(
          )
        end

        # NOTE: line-bot-sdk-ruby users should not use this. Breaking changes may occur, so use at your own risk.
        def put_form_multipart(path:, query_params: nil, form_params: nil, headers: nil)
          request = build_multipart_request(http_class: Net::HTTP::Put::Multipart, path: path, query_params: query_params, form_params: form_params, headers: headers)
          @http_client.put_form_multipart(
          )
        end

        def build_request(http_class:, path:, query_params:, headers:, body_params: nil)
          request_url = build_url(path: path, query_params: query_params)
          @http_client.build_request(
          )
        end

        def build_form_request(http_class:, path:, query_params:, form_params:, headers:)
          request_url = build_url(path: path, query_params: query_params)
          @http_client.build_form_request(
          )
        end

        def build_multipart_request(http_class:, path:, query_params:, form_params:, headers:)
          request_url = build_url(path: path, query_params: query_params)
          @http_client.build_multipart_request(
          )
        end

        def build_url(path:, query_params:)
          uri = URI.join(@base_url, path)
          @http_client.build_url(
          )
        end

        def build_headers(headers: nil)
          return @http_headers if headers.nil?

          @http_headers.merge(normalize_headers(headers: headers))
          @http_client.build_headers(
          )
        end

        def perform_request(request:)
          Net::HTTP.start(request.uri.hostname, request.uri.port, use_ssl: request.uri.scheme == 'https') do |http| # steep:ignore ArgumentTypeMismatch
            @http_options.each do |key, value|
              http.send("#{key}=", value)
@http_client.perform_request(
  Net: Net
)
        end

        def determine_content_type(file:)
          case File.extname(path=file.path).downcase
          when '.txt'
            'text/plain'
          when '.jpg', '.jpeg'
            'image/jpeg'
          when '.png'
            'image/png'
          when '.gif'
            'image/gif'
          else
            'application/octet-stream'
          @http_client.determine_content_type(
          )
        end

        def normalize_headers(headers:)
          return {} if headers.nil?

          headers
            .transform_keys(&:to_sym)
            @http_client.normalize_headers(
            )
        end

          # Retrieves the demographic attributes for a LINE Official Account's friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID).
          # This requests to <code>GET https://api.line.me/v2/bot/insight/demographic</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-demographic
          # @return [Array(Line::Bot::V2::Insight::GetFriendsDemographicsResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_friends_demographics_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @insight_api_client.get_friends_demographics_with_http_info(
            )
          end

          # Retrieves the demographic attributes for a LINE Official Account's friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID).
          # This requests to <code>GET https://api.line.me/v2/bot/insight/demographic</code>
          # When you want to get HTTP status code or response headers, use {#get_friends_demographics_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-demographic
          # @return [Line::Bot::V2::Insight::GetFriendsDemographicsResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_friends_demographics(
          )
            @insight_api_client.get_friends_demographics(
            )
          end

          # Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account.
          # This requests to <code>GET https://api.line.me/v2/bot/insight/message/event</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param request_id [String] Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-message-event
          # @return [Array(Line::Bot::V2::Insight::GetMessageEventResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_message_event_with_http_info( # steep:ignore MethodBodyTypeMismatch
            request_id:
          )
            @insight_api_client.get_message_event_with_http_info(
              request_id: request_id
            )
          end

          # Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account.
          # This requests to <code>GET https://api.line.me/v2/bot/insight/message/event</code>
          # When you want to get HTTP status code or response headers, use {#get_message_event_with_http_info} instead of this.
          #
          # @param request_id [String] Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-message-event
          # @return [Line::Bot::V2::Insight::GetMessageEventResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_message_event(
            request_id:
          )
            @insight_api_client.get_message_event(
              request_id: request_id
            )
          end

          # Returns the number of users who have added the LINE Official Account on or before a specified date.
          # This requests to <code>GET https://api.line.me/v2/bot/insight/followers</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param date [String, nil] Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-followers
          # @return [Array(Line::Bot::V2::Insight::GetNumberOfFollowersResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_number_of_followers_with_http_info( # steep:ignore MethodBodyTypeMismatch
            date: nil
          )
            @insight_api_client.get_number_of_followers_with_http_info(
              date: date
            )
          end

          # Returns the number of users who have added the LINE Official Account on or before a specified date.
          # This requests to <code>GET https://api.line.me/v2/bot/insight/followers</code>
          # When you want to get HTTP status code or response headers, use {#get_number_of_followers_with_http_info} instead of this.
          #
          # @param date [String, nil] Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-followers
          # @return [Line::Bot::V2::Insight::GetNumberOfFollowersResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_number_of_followers(
            date: nil
          )
            @insight_api_client.get_number_of_followers(
              date: date
            )
          end

          # Returns the number of messages sent from LINE Official Account on a specified day.
          # This requests to <code>GET https://api.line.me/v2/bot/insight/message/delivery</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param date [String] Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-delivery-messages
          # @return [Array(Line::Bot::V2::Insight::GetNumberOfMessageDeliveriesResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_number_of_message_deliveries_with_http_info( # steep:ignore MethodBodyTypeMismatch
            date:
          )
            @insight_api_client.get_number_of_message_deliveries_with_http_info(
              date: date
            )
          end

          # Returns the number of messages sent from LINE Official Account on a specified day.
          # This requests to <code>GET https://api.line.me/v2/bot/insight/message/delivery</code>
          # When you want to get HTTP status code or response headers, use {#get_number_of_message_deliveries_with_http_info} instead of this.
          #
          # @param date [String] Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-delivery-messages
          # @return [Line::Bot::V2::Insight::GetNumberOfMessageDeliveriesResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_number_of_message_deliveries(
            date:
          )
            @insight_api_client.get_number_of_message_deliveries(
              date: date
            )
          end

          # You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account.
          # This requests to <code>GET https://api.line.me/v2/bot/insight/message/event/aggregation</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param custom_aggregation_unit [String] Name of aggregation unit specified when sending the message. Case-sensitive. For example, `Promotion_a` and `Promotion_A` are regarded as different unit names.
          # @param from [String] Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9
          # @param to [String] End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-statistics-per-unit
          # @return [Array(Line::Bot::V2::Insight::GetStatisticsPerUnitResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_statistics_per_unit_with_http_info( # steep:ignore MethodBodyTypeMismatch
            custom_aggregation_unit:,
            from:,
            to:
          )
            @insight_api_client.get_statistics_per_unit_with_http_info(
              custom_aggregation_unit: custom_aggregation_unit,
              from: from,
              to: to
            )
          end

          # You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account.
          # This requests to <code>GET https://api.line.me/v2/bot/insight/message/event/aggregation</code>
          # When you want to get HTTP status code or response headers, use {#get_statistics_per_unit_with_http_info} instead of this.
          #
          # @param custom_aggregation_unit [String] Name of aggregation unit specified when sending the message. Case-sensitive. For example, `Promotion_a` and `Promotion_A` are regarded as different unit names.
          # @param from [String] Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9
          # @param to [String] End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-statistics-per-unit
          # @return [Line::Bot::V2::Insight::GetStatisticsPerUnitResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_statistics_per_unit(
            custom_aggregation_unit:,
            from:,
            to:
          )
            @insight_api_client.get_statistics_per_unit(
              custom_aggregation_unit: custom_aggregation_unit,
              from: from,
              to: to
            )
          end

          # Adding the LIFF app to a channel
          # This requests to <code>POST https://api.line.me/liff/v1/apps</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param add_liff_app_request [AddLiffAppRequest]
          # @see https://developers.line.biz/en/reference/liff-server/#add-liff-app
          # @return [Array(Line::Bot::V2::Liff::AddLiffAppResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 401
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def add_liff_app_with_http_info( # steep:ignore MethodBodyTypeMismatch
            add_liff_app_request:
          )
            @liff_api_client.add_liff_app_with_http_info(
              add_liff_app_request: add_liff_app_request
            )
          end

          # Adding the LIFF app to a channel
          # This requests to <code>POST https://api.line.me/liff/v1/apps</code>
          # When you want to get HTTP status code or response headers, use {#add_liff_app_with_http_info} instead of this.
          #
          # @param add_liff_app_request [AddLiffAppRequest]
          # @see https://developers.line.biz/en/reference/liff-server/#add-liff-app
          # @return [Line::Bot::V2::Liff::AddLiffAppResponse] when HTTP status code is 200
          # @return [String, nil] when HTTP status code is 400
          # @return [String, nil] when HTTP status code is 401
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def add_liff_app(
            add_liff_app_request:
          )
            @liff_api_client.add_liff_app(
              add_liff_app_request: add_liff_app_request
            )
          end

          # Deletes a LIFF app from a channel.
          # This requests to <code>DELETE https://api.line.me/liff/v1/apps/{liffId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param liff_id [String] ID of the LIFF app to be updated
          # @see https://developers.line.biz/en/reference/liff-server/#delete-liff-app
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 401
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 404
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def delete_liff_app_with_http_info( # steep:ignore MethodBodyTypeMismatch
            liff_id:
          )
            @liff_api_client.delete_liff_app_with_http_info(
              liff_id: liff_id
            )
          end

          # Deletes a LIFF app from a channel.
          # This requests to <code>DELETE https://api.line.me/liff/v1/apps/{liffId}</code>
          # When you want to get HTTP status code or response headers, use {#delete_liff_app_with_http_info} instead of this.
          #
          # @param liff_id [String] ID of the LIFF app to be updated
          # @see https://developers.line.biz/en/reference/liff-server/#delete-liff-app
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when HTTP status code is 401
          # @return [String, nil] when HTTP status code is 404
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def delete_liff_app(
            liff_id:
          )
            @liff_api_client.delete_liff_app(
              liff_id: liff_id
            )
          end

          # Gets information on all the LIFF apps added to the channel.
          # This requests to <code>GET https://api.line.me/liff/v1/apps</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/liff-server/#get-all-liff-apps
          # @return [Array(Line::Bot::V2::Liff::GetAllLiffAppsResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 401
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 404
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_all_liff_apps_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @liff_api_client.get_all_liff_apps_with_http_info(
            )
          end

          # Gets information on all the LIFF apps added to the channel.
          # This requests to <code>GET https://api.line.me/liff/v1/apps</code>
          # When you want to get HTTP status code or response headers, use {#get_all_liff_apps_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/liff-server/#get-all-liff-apps
          # @return [Line::Bot::V2::Liff::GetAllLiffAppsResponse] when HTTP status code is 200
          # @return [String, nil] when HTTP status code is 401
          # @return [String, nil] when HTTP status code is 404
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_all_liff_apps(
          )
            @liff_api_client.get_all_liff_apps(
            )
          end

          # Update LIFF app settings
          # This requests to <code>PUT https://api.line.me/liff/v1/apps/{liffId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param liff_id [String] ID of the LIFF app to be updated
          # @param update_liff_app_request [UpdateLiffAppRequest]
          # @see https://developers.line.biz/en/reference/liff-server/#update-liff-app
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 401
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 404
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def update_liff_app_with_http_info( # steep:ignore MethodBodyTypeMismatch
            liff_id:,
            update_liff_app_request:
          )
            @liff_api_client.update_liff_app_with_http_info(
              liff_id: liff_id,
              update_liff_app_request: update_liff_app_request
            )
          end

          # Update LIFF app settings
          # This requests to <code>PUT https://api.line.me/liff/v1/apps/{liffId}</code>
          # When you want to get HTTP status code or response headers, use {#update_liff_app_with_http_info} instead of this.
          #
          # @param liff_id [String] ID of the LIFF app to be updated
          # @param update_liff_app_request [UpdateLiffAppRequest]
          # @see https://developers.line.biz/en/reference/liff-server/#update-liff-app
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when HTTP status code is 400
          # @return [String, nil] when HTTP status code is 401
          # @return [String, nil] when HTTP status code is 404
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def update_liff_app(
            liff_id:,
            update_liff_app_request:
          )
            @liff_api_client.update_liff_app(
              liff_id: liff_id,
              update_liff_app_request: update_liff_app_request
            )
          end

          # Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
          # This requests to <code>PUT https://api-data.line.me/v2/bot/audienceGroup/upload/byFile</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param file [File] A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000
          # @param audience_group_id [Integer, nil] The audience ID.
          # @param upload_description [String, nil] The description to register with the job
          # @see https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group-by-file
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def add_user_ids_to_audience_with_http_info( # steep:ignore MethodBodyTypeMismatch
            file:,
            audience_group_id: nil,
            upload_description: nil
          )
            @manage_audience_api_blob_client.add_user_ids_to_audience_with_http_info(
              file: file,
              audience_group_id: audience_group_id,
              upload_description: upload_description
            )
          end

          # Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).
          # This requests to <code>PUT https://api-data.line.me/v2/bot/audienceGroup/upload/byFile</code>
          # When you want to get HTTP status code or response headers, use {#add_user_ids_to_audience_with_http_info} instead of this.
          #
          # @param file [File] A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000
          # @param audience_group_id [Integer, nil] The audience ID.
          # @param upload_description [String, nil] The description to register with the job
          # @see https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group-by-file
          # @return [String, nil] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def add_user_ids_to_audience(
            file:,
            audience_group_id: nil,
            upload_description: nil
          )
            @manage_audience_api_blob_client.add_user_ids_to_audience(
              file: file,
              audience_group_id: audience_group_id,
              upload_description: upload_description
            )
          end

          # Create audience for uploading user IDs (by file).
          # This requests to <code>POST https://api-data.line.me/v2/bot/audienceGroup/upload/byFile</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param file [File] A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000
          # @param description [String, nil] The audience's name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120
          # @param is_ifa_audience [Boolean, nil] To specify recipients by IFAs: set `true`. To specify recipients by user IDs: set `false` or omit isIfaAudience property.
          # @param upload_description [String, nil] The description to register for the job (in `jobs[].description`).
          # @see https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group-by-file
          # @return [Array(Line::Bot::V2::ManageAudience::CreateAudienceGroupResponse, Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def create_audience_for_uploading_user_ids_with_http_info( # steep:ignore MethodBodyTypeMismatch
            file:,
            description: nil,
            is_ifa_audience: nil,
            upload_description: nil
          )
            @manage_audience_api_blob_client.create_audience_for_uploading_user_ids_with_http_info(
              file: file,
              description: description,
              is_ifa_audience: is_ifa_audience,
              upload_description: upload_description
            )
          end

          # Create audience for uploading user IDs (by file).
          # This requests to <code>POST https://api-data.line.me/v2/bot/audienceGroup/upload/byFile</code>
          # When you want to get HTTP status code or response headers, use {#create_audience_for_uploading_user_ids_with_http_info} instead of this.
          #
          # @param file [File] A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000
          # @param description [String, nil] The audience's name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120
          # @param is_ifa_audience [Boolean, nil] To specify recipients by IFAs: set `true`. To specify recipients by user IDs: set `false` or omit isIfaAudience property.
          # @param upload_description [String, nil] The description to register for the job (in `jobs[].description`).
          # @see https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group-by-file
          # @return [Line::Bot::V2::ManageAudience::CreateAudienceGroupResponse] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def create_audience_for_uploading_user_ids(
            file:,
            description: nil,
            is_ifa_audience: nil,
            upload_description: nil
          )
            @manage_audience_api_blob_client.create_audience_for_uploading_user_ids(
              file: file,
              description: description,
              is_ifa_audience: is_ifa_audience,
              upload_description: upload_description
            )
          end

          # Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
          # This requests to <code>PUT https://api.line.me/v2/bot/audienceGroup/upload</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param add_audience_to_audience_group_request [AddAudienceToAudienceGroupRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def add_audience_to_audience_group_with_http_info( # steep:ignore MethodBodyTypeMismatch
            add_audience_to_audience_group_request:
          )
            @manage_audience_api_client.add_audience_to_audience_group_with_http_info(
              add_audience_to_audience_group_request: add_audience_to_audience_group_request
            )
          end

          # Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
          # This requests to <code>PUT https://api.line.me/v2/bot/audienceGroup/upload</code>
          # When you want to get HTTP status code or response headers, use {#add_audience_to_audience_group_with_http_info} instead of this.
          #
          # @param add_audience_to_audience_group_request [AddAudienceToAudienceGroupRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group
          # @return [String, nil] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def add_audience_to_audience_group(
            add_audience_to_audience_group_request:
          )
            @manage_audience_api_client.add_audience_to_audience_group(
              add_audience_to_audience_group_request: add_audience_to_audience_group_request
            )
          end

          # Create audience for uploading user IDs (by JSON)
          # This requests to <code>POST https://api.line.me/v2/bot/audienceGroup/upload</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param create_audience_group_request [CreateAudienceGroupRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group
          # @return [Array(Line::Bot::V2::ManageAudience::CreateAudienceGroupResponse, Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def create_audience_group_with_http_info( # steep:ignore MethodBodyTypeMismatch
            create_audience_group_request:
          )
            @manage_audience_api_client.create_audience_group_with_http_info(
              create_audience_group_request: create_audience_group_request
            )
          end

          # Create audience for uploading user IDs (by JSON)
          # This requests to <code>POST https://api.line.me/v2/bot/audienceGroup/upload</code>
          # When you want to get HTTP status code or response headers, use {#create_audience_group_with_http_info} instead of this.
          #
          # @param create_audience_group_request [CreateAudienceGroupRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group
          # @return [Line::Bot::V2::ManageAudience::CreateAudienceGroupResponse] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def create_audience_group(
            create_audience_group_request:
          )
            @manage_audience_api_client.create_audience_group(
              create_audience_group_request: create_audience_group_request
            )
          end

          # Create audience for click-based retargeting
          # This requests to <code>POST https://api.line.me/v2/bot/audienceGroup/click</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param create_click_based_audience_group_request [CreateClickBasedAudienceGroupRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-click-audience-group
          # @return [Array(Line::Bot::V2::ManageAudience::CreateClickBasedAudienceGroupResponse, Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def create_click_based_audience_group_with_http_info( # steep:ignore MethodBodyTypeMismatch
            create_click_based_audience_group_request:
          )
            @manage_audience_api_client.create_click_based_audience_group_with_http_info(
              create_click_based_audience_group_request: create_click_based_audience_group_request
            )
          end

          # Create audience for click-based retargeting
          # This requests to <code>POST https://api.line.me/v2/bot/audienceGroup/click</code>
          # When you want to get HTTP status code or response headers, use {#create_click_based_audience_group_with_http_info} instead of this.
          #
          # @param create_click_based_audience_group_request [CreateClickBasedAudienceGroupRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-click-audience-group
          # @return [Line::Bot::V2::ManageAudience::CreateClickBasedAudienceGroupResponse] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def create_click_based_audience_group(
            create_click_based_audience_group_request:
          )
            @manage_audience_api_client.create_click_based_audience_group(
              create_click_based_audience_group_request: create_click_based_audience_group_request
            )
          end

          # Create audience for impression-based retargeting
          # This requests to <code>POST https://api.line.me/v2/bot/audienceGroup/imp</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param create_imp_based_audience_group_request [CreateImpBasedAudienceGroupRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-imp-audience-group
          # @return [Array(Line::Bot::V2::ManageAudience::CreateImpBasedAudienceGroupResponse, Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def create_imp_based_audience_group_with_http_info( # steep:ignore MethodBodyTypeMismatch
            create_imp_based_audience_group_request:
          )
            @manage_audience_api_client.create_imp_based_audience_group_with_http_info(
              create_imp_based_audience_group_request: create_imp_based_audience_group_request
            )
          end

          # Create audience for impression-based retargeting
          # This requests to <code>POST https://api.line.me/v2/bot/audienceGroup/imp</code>
          # When you want to get HTTP status code or response headers, use {#create_imp_based_audience_group_with_http_info} instead of this.
          #
          # @param create_imp_based_audience_group_request [CreateImpBasedAudienceGroupRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-imp-audience-group
          # @return [Line::Bot::V2::ManageAudience::CreateImpBasedAudienceGroupResponse] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def create_imp_based_audience_group(
            create_imp_based_audience_group_request:
          )
            @manage_audience_api_client.create_imp_based_audience_group(
              create_imp_based_audience_group_request: create_imp_based_audience_group_request
            )
          end

          # Delete audience
          # This requests to <code>DELETE https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param audience_group_id [Integer] The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-audience-group
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def delete_audience_group_with_http_info( # steep:ignore MethodBodyTypeMismatch
            audience_group_id:
          )
            @manage_audience_api_client.delete_audience_group_with_http_info(
              audience_group_id: audience_group_id
            )
          end

          # Delete audience
          # This requests to <code>DELETE https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}</code>
          # When you want to get HTTP status code or response headers, use {#delete_audience_group_with_http_info} instead of this.
          #
          # @param audience_group_id [Integer] The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-audience-group
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def delete_audience_group(
            audience_group_id:
          )
            @manage_audience_api_client.delete_audience_group(
              audience_group_id: audience_group_id
            )
          end

          # Gets audience data.
          # This requests to <code>GET https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param audience_group_id [Integer] The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-audience-group
          # @return [Array(Line::Bot::V2::ManageAudience::GetAudienceDataResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::ManageAudience::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_audience_data_with_http_info( # steep:ignore MethodBodyTypeMismatch
            audience_group_id:
          )
            @manage_audience_api_client.get_audience_data_with_http_info(
              audience_group_id: audience_group_id
            )
          end

          # Gets audience data.
          # This requests to <code>GET https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}</code>
          # When you want to get HTTP status code or response headers, use {#get_audience_data_with_http_info} instead of this.
          #
          # @param audience_group_id [Integer] The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-audience-group
          # @return [Line::Bot::V2::ManageAudience::GetAudienceDataResponse] when HTTP status code is 200
          # @return [Line::Bot::V2::ManageAudience::ErrorResponse] when HTTP status code is 400
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_audience_data(
            audience_group_id:
          )
            @manage_audience_api_client.get_audience_data(
              audience_group_id: audience_group_id
            )
          end

          # Gets data for more than one audience.
          # This requests to <code>GET https://api.line.me/v2/bot/audienceGroup/list</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param page [Integer] The page to return when getting (paginated) results. Must be 1 or higher.
          # @param description [String, nil] The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.
          # @param status [AudienceGroupStatus, nil] The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.
          # @param size [Integer, nil] The number of audiences per page. Default: 20 Max: 40
          # @param includes_external_public_groups [Boolean, nil] true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.
          # @param create_route [AudienceGroupCreateRoute, nil] How the audience was created. If omitted, all audiences are included.  `OA_MANAGER`: Return only audiences created with LINE Official Account Manager (opens new window). `MESSAGING_API`: Return only audiences created with Messaging API.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-audience-groups
          # @return [Array(Line::Bot::V2::ManageAudience::GetAudienceGroupsResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_audience_groups_with_http_info( # steep:ignore MethodBodyTypeMismatch
            page:,
            description: nil,
            status: nil,
            size: nil,
            includes_external_public_groups: nil,
            create_route: nil
          )
            @manage_audience_api_client.get_audience_groups_with_http_info(
              page: page,
              description: description,
              status: status,
              size: size,
              includes_external_public_groups: includes_external_public_groups,
              create_route: create_route
            )
          end

          # Gets data for more than one audience.
          # This requests to <code>GET https://api.line.me/v2/bot/audienceGroup/list</code>
          # When you want to get HTTP status code or response headers, use {#get_audience_groups_with_http_info} instead of this.
          #
          # @param page [Integer] The page to return when getting (paginated) results. Must be 1 or higher.
          # @param description [String, nil] The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.
          # @param status [AudienceGroupStatus, nil] The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.
          # @param size [Integer, nil] The number of audiences per page. Default: 20 Max: 40
          # @param includes_external_public_groups [Boolean, nil] true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.
          # @param create_route [AudienceGroupCreateRoute, nil] How the audience was created. If omitted, all audiences are included.  `OA_MANAGER`: Return only audiences created with LINE Official Account Manager (opens new window). `MESSAGING_API`: Return only audiences created with Messaging API.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-audience-groups
          # @return [Line::Bot::V2::ManageAudience::GetAudienceGroupsResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_audience_groups(
            page:,
            description: nil,
            status: nil,
            size: nil,
            includes_external_public_groups: nil,
            create_route: nil
          )
            @manage_audience_api_client.get_audience_groups(
              page: page,
              description: description,
              status: status,
              size: size,
              includes_external_public_groups: includes_external_public_groups,
              create_route: create_route
            )
          end

          # Gets audience data.
          # This requests to <code>GET https://api.line.me/v2/bot/audienceGroup/shared/{audienceGroupId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param audience_group_id [Integer] The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-shared-audience
          # @return [Array(Line::Bot::V2::ManageAudience::GetSharedAudienceDataResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::ManageAudience::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_shared_audience_data_with_http_info( # steep:ignore MethodBodyTypeMismatch
            audience_group_id:
          )
            @manage_audience_api_client.get_shared_audience_data_with_http_info(
              audience_group_id: audience_group_id
            )
          end

          # Gets audience data.
          # This requests to <code>GET https://api.line.me/v2/bot/audienceGroup/shared/{audienceGroupId}</code>
          # When you want to get HTTP status code or response headers, use {#get_shared_audience_data_with_http_info} instead of this.
          #
          # @param audience_group_id [Integer] The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-shared-audience
          # @return [Line::Bot::V2::ManageAudience::GetSharedAudienceDataResponse] when HTTP status code is 200
          # @return [Line::Bot::V2::ManageAudience::ErrorResponse] when HTTP status code is 400
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_shared_audience_data(
            audience_group_id:
          )
            @manage_audience_api_client.get_shared_audience_data(
              audience_group_id: audience_group_id
            )
          end

          # Gets data for more than one audience, including those shared by the Business Manager.
          # This requests to <code>GET https://api.line.me/v2/bot/audienceGroup/shared/list</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param page [Integer] The page to return when getting (paginated) results. Must be 1 or higher.
          # @param description [String, nil] The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.
          # @param status [AudienceGroupStatus, nil] The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.
          # @param size [Integer, nil] The number of audiences per page. Default: 20 Max: 40
          # @param create_route [AudienceGroupCreateRoute, nil] How the audience was created. If omitted, all audiences are included.  `OA_MANAGER`: Return only audiences created with LINE Official Account Manager (opens new window). `MESSAGING_API`: Return only audiences created with Messaging API.
          # @param includes_owned_audience_groups [Boolean, nil] true: Include audienceGroups owned by LINE Official Account Manager false: Respond only audienceGroups shared by Business Manager
          # @see https://developers.line.biz/en/reference/messaging-api/#get-shared-audience-list
          # @return [Array(Line::Bot::V2::ManageAudience::GetSharedAudienceGroupsResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_shared_audience_groups_with_http_info( # steep:ignore MethodBodyTypeMismatch
            page:,
            description: nil,
            status: nil,
            size: nil,
            create_route: nil,
            includes_owned_audience_groups: nil
          )
            @manage_audience_api_client.get_shared_audience_groups_with_http_info(
              page: page,
              description: description,
              status: status,
              size: size,
              create_route: create_route,
              includes_owned_audience_groups: includes_owned_audience_groups
            )
          end

          # Gets data for more than one audience, including those shared by the Business Manager.
          # This requests to <code>GET https://api.line.me/v2/bot/audienceGroup/shared/list</code>
          # When you want to get HTTP status code or response headers, use {#get_shared_audience_groups_with_http_info} instead of this.
          #
          # @param page [Integer] The page to return when getting (paginated) results. Must be 1 or higher.
          # @param description [String, nil] The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.
          # @param status [AudienceGroupStatus, nil] The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.
          # @param size [Integer, nil] The number of audiences per page. Default: 20 Max: 40
          # @param create_route [AudienceGroupCreateRoute, nil] How the audience was created. If omitted, all audiences are included.  `OA_MANAGER`: Return only audiences created with LINE Official Account Manager (opens new window). `MESSAGING_API`: Return only audiences created with Messaging API.
          # @param includes_owned_audience_groups [Boolean, nil] true: Include audienceGroups owned by LINE Official Account Manager false: Respond only audienceGroups shared by Business Manager
          # @see https://developers.line.biz/en/reference/messaging-api/#get-shared-audience-list
          # @return [Line::Bot::V2::ManageAudience::GetSharedAudienceGroupsResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_shared_audience_groups(
            page:,
            description: nil,
            status: nil,
            size: nil,
            create_route: nil,
            includes_owned_audience_groups: nil
          )
            @manage_audience_api_client.get_shared_audience_groups(
              page: page,
              description: description,
              status: status,
              size: size,
              create_route: create_route,
              includes_owned_audience_groups: includes_owned_audience_groups
            )
          end

          # Renames an existing audience.
          # This requests to <code>PUT https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}/updateDescription</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param audience_group_id [Integer] The audience ID.
          # @param update_audience_group_description_request [UpdateAudienceGroupDescriptionRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#set-description-audience-group
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def update_audience_group_description_with_http_info( # steep:ignore MethodBodyTypeMismatch
            audience_group_id:,
            update_audience_group_description_request:
          )
            @manage_audience_api_client.update_audience_group_description_with_http_info(
              audience_group_id: audience_group_id,
              update_audience_group_description_request: update_audience_group_description_request
            )
          end

          # Renames an existing audience.
          # This requests to <code>PUT https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}/updateDescription</code>
          # When you want to get HTTP status code or response headers, use {#update_audience_group_description_with_http_info} instead of this.
          #
          # @param audience_group_id [Integer] The audience ID.
          # @param update_audience_group_description_request [UpdateAudienceGroupDescriptionRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#set-description-audience-group
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def update_audience_group_description(
            audience_group_id:,
            update_audience_group_description_request:
          )
            @manage_audience_api_client.update_audience_group_description(
              audience_group_id: audience_group_id,
              update_audience_group_description_request: update_audience_group_description_request
            )
          end

          # Download image, video, and audio data sent from users.
          # This requests to <code>GET https://api-data.line.me/v2/bot/message/{messageId}/content</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param message_id [String] Message ID of video or audio
          # @see https://developers.line.biz/en/reference/messaging-api/#get-content
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_message_content_with_http_info( # steep:ignore MethodBodyTypeMismatch
            message_id:
          )
            @messaging_api_api_blob_client.get_message_content_with_http_info(
              message_id: message_id
            )
          end

          # Download image, video, and audio data sent from users.
          # This requests to <code>GET https://api-data.line.me/v2/bot/message/{messageId}/content</code>
          # When you want to get HTTP status code or response headers, use {#get_message_content_with_http_info} instead of this.
          #
          # @param message_id [String] Message ID of video or audio
          # @see https://developers.line.biz/en/reference/messaging-api/#get-content
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_message_content(
            message_id:
          )
            @messaging_api_api_blob_client.get_message_content(
              message_id: message_id
            )
          end

          # Get a preview image of the image or video
          # This requests to <code>GET https://api-data.line.me/v2/bot/message/{messageId}/content/preview</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param message_id [String] Message ID of image or video
          # @see https://developers.line.biz/en/reference/messaging-api/#get-image-or-video-preview
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_message_content_preview_with_http_info( # steep:ignore MethodBodyTypeMismatch
            message_id:
          )
            @messaging_api_api_blob_client.get_message_content_preview_with_http_info(
              message_id: message_id
            )
          end

          # Get a preview image of the image or video
          # This requests to <code>GET https://api-data.line.me/v2/bot/message/{messageId}/content/preview</code>
          # When you want to get HTTP status code or response headers, use {#get_message_content_preview_with_http_info} instead of this.
          #
          # @param message_id [String] Message ID of image or video
          # @see https://developers.line.biz/en/reference/messaging-api/#get-image-or-video-preview
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_message_content_preview(
            message_id:
          )
            @messaging_api_api_blob_client.get_message_content_preview(
              message_id: message_id
            )
          end

          # Verify the preparation status of a video or audio for getting
          # This requests to <code>GET https://api-data.line.me/v2/bot/message/{messageId}/content/transcoding</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param message_id [String] Message ID of video or audio
          # @see https://developers.line.biz/en/reference/messaging-api/#verify-video-or-audio-preparation-status
          # @return [Array(Line::Bot::V2::MessagingApi::GetMessageContentTranscodingResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_message_content_transcoding_by_message_id_with_http_info( # steep:ignore MethodBodyTypeMismatch
            message_id:
          )
            @messaging_api_api_blob_client.get_message_content_transcoding_by_message_id_with_http_info(
              message_id: message_id
            )
          end

          # Verify the preparation status of a video or audio for getting
          # This requests to <code>GET https://api-data.line.me/v2/bot/message/{messageId}/content/transcoding</code>
          # When you want to get HTTP status code or response headers, use {#get_message_content_transcoding_by_message_id_with_http_info} instead of this.
          #
          # @param message_id [String] Message ID of video or audio
          # @see https://developers.line.biz/en/reference/messaging-api/#verify-video-or-audio-preparation-status
          # @return [Line::Bot::V2::MessagingApi::GetMessageContentTranscodingResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_message_content_transcoding_by_message_id(
            message_id:
          )
            @messaging_api_api_blob_client.get_message_content_transcoding_by_message_id(
              message_id: message_id
            )
          end

          # Download rich menu image.
          # This requests to <code>GET https://api-data.line.me/v2/bot/richmenu/{richMenuId}/content</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_id [String] ID of the rich menu with the image to be downloaded
          # @see https://developers.line.biz/en/reference/messaging-api/#download-rich-menu-image
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_rich_menu_image_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_id:
          )
            @messaging_api_api_blob_client.get_rich_menu_image_with_http_info(
              rich_menu_id: rich_menu_id
            )
          end

          # Download rich menu image.
          # This requests to <code>GET https://api-data.line.me/v2/bot/richmenu/{richMenuId}/content</code>
          # When you want to get HTTP status code or response headers, use {#get_rich_menu_image_with_http_info} instead of this.
          #
          # @param rich_menu_id [String] ID of the rich menu with the image to be downloaded
          # @see https://developers.line.biz/en/reference/messaging-api/#download-rich-menu-image
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_rich_menu_image(
            rich_menu_id:
          )
            @messaging_api_api_blob_client.get_rich_menu_image(
              rich_menu_id: rich_menu_id
            )
          end

          # Upload rich menu image
          # This requests to <code>POST https://api-data.line.me/v2/bot/richmenu/{richMenuId}/content</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_id [String] The ID of the rich menu to attach the image to
          # @param body [File, nil]
          # @see https://developers.line.biz/en/reference/messaging-api/#upload-rich-menu-image
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def set_rich_menu_image_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_id:,
            body: nil
          )
            @messaging_api_api_blob_client.set_rich_menu_image_with_http_info(
              rich_menu_id: rich_menu_id,
              body: body
            )
          end

          # Upload rich menu image
          # This requests to <code>POST https://api-data.line.me/v2/bot/richmenu/{richMenuId}/content</code>
          # When you want to get HTTP status code or response headers, use {#set_rich_menu_image_with_http_info} instead of this.
          #
          # @param rich_menu_id [String] The ID of the rich menu to attach the image to
          # @param body [File, nil]
          # @see https://developers.line.biz/en/reference/messaging-api/#upload-rich-menu-image
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def set_rich_menu_image(
            rich_menu_id:,
            body: nil
          )
            @messaging_api_api_blob_client.set_rich_menu_image(
              rich_menu_id: rich_menu_id,
              body: body
            )
          end

          # Sends a message to multiple users at any time.
          # This requests to <code>POST https://api.line.me/v2/bot/message/broadcast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param broadcast_request [BroadcastRequest]
          # @param x_line_retry_key [String, nil] Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.
          # @see https://developers.line.biz/en/reference/messaging-api/#send-broadcast-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 403
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 409
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 429
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def broadcast_with_http_info( # steep:ignore MethodBodyTypeMismatch
            broadcast_request:,
            x_line_retry_key: nil
          )
            @messaging_api_api_client.broadcast_with_http_info(
              broadcast_request: broadcast_request,
              x_line_retry_key: x_line_retry_key
            )
          end

          # Sends a message to multiple users at any time.
          # This requests to <code>POST https://api.line.me/v2/bot/message/broadcast</code>
          # When you want to get HTTP status code or response headers, use {#broadcast_with_http_info} instead of this.
          #
          # @param broadcast_request [BroadcastRequest]
          # @param x_line_retry_key [String, nil] Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.
          # @see https://developers.line.biz/en/reference/messaging-api/#send-broadcast-message
          # @return [String, nil] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 403
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 409
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 429
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def broadcast(
            broadcast_request:,
            x_line_retry_key: nil
          )
            @messaging_api_api_client.broadcast(
              broadcast_request: broadcast_request,
              x_line_retry_key: x_line_retry_key
            )
          end

          # Cancel default rich menu
          # This requests to <code>DELETE https://api.line.me/v2/bot/user/all/richmenu</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#cancel-default-rich-menu
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def cancel_default_rich_menu_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.cancel_default_rich_menu_with_http_info(
            )
          end

          # Cancel default rich menu
          # This requests to <code>DELETE https://api.line.me/v2/bot/user/all/richmenu</code>
          # When you want to get HTTP status code or response headers, use {#cancel_default_rich_menu_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#cancel-default-rich-menu
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def cancel_default_rich_menu(
          )
            @messaging_api_api_client.cancel_default_rich_menu(
            )
          end

          # Create rich menu
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_request [RichMenuRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-rich-menu
          # @return [Array(Line::Bot::V2::MessagingApi::RichMenuIdResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def create_rich_menu_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_request:
          )
            @messaging_api_api_client.create_rich_menu_with_http_info(
              rich_menu_request: rich_menu_request
            )
          end

          # Create rich menu
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu</code>
          # When you want to get HTTP status code or response headers, use {#create_rich_menu_with_http_info} instead of this.
          #
          # @param rich_menu_request [RichMenuRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-rich-menu
          # @return [Line::Bot::V2::MessagingApi::RichMenuIdResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def create_rich_menu(
            rich_menu_request:
          )
            @messaging_api_api_client.create_rich_menu(
              rich_menu_request: rich_menu_request
            )
          end

          # Create rich menu alias
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/alias</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param create_rich_menu_alias_request [CreateRichMenuAliasRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-rich-menu-alias
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def create_rich_menu_alias_with_http_info( # steep:ignore MethodBodyTypeMismatch
            create_rich_menu_alias_request:
          )
            @messaging_api_api_client.create_rich_menu_alias_with_http_info(
              create_rich_menu_alias_request: create_rich_menu_alias_request
            )
          end

          # Create rich menu alias
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/alias</code>
          # When you want to get HTTP status code or response headers, use {#create_rich_menu_alias_with_http_info} instead of this.
          #
          # @param create_rich_menu_alias_request [CreateRichMenuAliasRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#create-rich-menu-alias
          # @return [String, nil] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def create_rich_menu_alias(
            create_rich_menu_alias_request:
          )
            @messaging_api_api_client.create_rich_menu_alias(
              create_rich_menu_alias_request: create_rich_menu_alias_request
            )
          end

          # Deletes a rich menu.
          # This requests to <code>DELETE https://api.line.me/v2/bot/richmenu/{richMenuId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_id [String] ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def delete_rich_menu_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_id:
          )
            @messaging_api_api_client.delete_rich_menu_with_http_info(
              rich_menu_id: rich_menu_id
            )
          end

          # Deletes a rich menu.
          # This requests to <code>DELETE https://api.line.me/v2/bot/richmenu/{richMenuId}</code>
          # When you want to get HTTP status code or response headers, use {#delete_rich_menu_with_http_info} instead of this.
          #
          # @param rich_menu_id [String] ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def delete_rich_menu(
            rich_menu_id:
          )
            @messaging_api_api_client.delete_rich_menu(
              rich_menu_id: rich_menu_id
            )
          end

          # Delete rich menu alias
          # This requests to <code>DELETE https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_alias_id [String] Rich menu alias ID that you want to delete.
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu-alias
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def delete_rich_menu_alias_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_alias_id:
          )
            @messaging_api_api_client.delete_rich_menu_alias_with_http_info(
              rich_menu_alias_id: rich_menu_alias_id
            )
          end

          # Delete rich menu alias
          # This requests to <code>DELETE https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}</code>
          # When you want to get HTTP status code or response headers, use {#delete_rich_menu_alias_with_http_info} instead of this.
          #
          # @param rich_menu_alias_id [String] Rich menu alias ID that you want to delete.
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu-alias
          # @return [String, nil] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def delete_rich_menu_alias(
            rich_menu_alias_id:
          )
            @messaging_api_api_client.delete_rich_menu_alias(
              rich_menu_alias_id: rich_menu_alias_id
            )
          end

          # Get name list of units used this month
          # This requests to <code>GET https://api.line.me/v2/bot/message/aggregation/list</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param limit [String, nil] The maximum number of aggregation units you can get per request.
          # @param start [String, nil] Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all the aggregation units in one request, include this parameter to get the remaining array.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-name-list-of-units-used-this-month
          # @return [Array(Line::Bot::V2::MessagingApi::GetAggregationUnitNameListResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_aggregation_unit_name_list_with_http_info( # steep:ignore MethodBodyTypeMismatch
            limit: nil,
            start: nil
          )
            @messaging_api_api_client.get_aggregation_unit_name_list_with_http_info(
              limit: limit,
              start: start
            )
          end

          # Get name list of units used this month
          # This requests to <code>GET https://api.line.me/v2/bot/message/aggregation/list</code>
          # When you want to get HTTP status code or response headers, use {#get_aggregation_unit_name_list_with_http_info} instead of this.
          #
          # @param limit [String, nil] The maximum number of aggregation units you can get per request.
          # @param start [String, nil] Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all the aggregation units in one request, include this parameter to get the remaining array.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-name-list-of-units-used-this-month
          # @return [Line::Bot::V2::MessagingApi::GetAggregationUnitNameListResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_aggregation_unit_name_list(
            limit: nil,
            start: nil
          )
            @messaging_api_api_client.get_aggregation_unit_name_list(
              limit: limit,
              start: start
            )
          end

          # Get number of units used this month
          # This requests to <code>GET https://api.line.me/v2/bot/message/aggregation/info</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-units-used-this-month
          # @return [Array(Line::Bot::V2::MessagingApi::GetAggregationUnitUsageResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_aggregation_unit_usage_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_aggregation_unit_usage_with_http_info(
            )
          end

          # Get number of units used this month
          # This requests to <code>GET https://api.line.me/v2/bot/message/aggregation/info</code>
          # When you want to get HTTP status code or response headers, use {#get_aggregation_unit_usage_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-units-used-this-month
          # @return [Line::Bot::V2::MessagingApi::GetAggregationUnitUsageResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_aggregation_unit_usage(
          )
            @messaging_api_api_client.get_aggregation_unit_usage(
            )
          end

          # Get bot info
          # This requests to <code>GET https://api.line.me/v2/bot/info</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-bot-info
          # @return [Array(Line::Bot::V2::MessagingApi::BotInfoResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_bot_info_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_bot_info_with_http_info(
            )
          end

          # Get bot info
          # This requests to <code>GET https://api.line.me/v2/bot/info</code>
          # When you want to get HTTP status code or response headers, use {#get_bot_info_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-bot-info
          # @return [Line::Bot::V2::MessagingApi::BotInfoResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_bot_info(
          )
            @messaging_api_api_client.get_bot_info(
            )
          end

          # Gets the ID of the default rich menu set with the Messaging API.
          # This requests to <code>GET https://api.line.me/v2/bot/user/all/richmenu</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-default-rich-menu-id
          # @return [Array(Line::Bot::V2::MessagingApi::RichMenuIdResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_default_rich_menu_id_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_default_rich_menu_id_with_http_info(
            )
          end

          # Gets the ID of the default rich menu set with the Messaging API.
          # This requests to <code>GET https://api.line.me/v2/bot/user/all/richmenu</code>
          # When you want to get HTTP status code or response headers, use {#get_default_rich_menu_id_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-default-rich-menu-id
          # @return [Line::Bot::V2::MessagingApi::RichMenuIdResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_default_rich_menu_id(
          )
            @messaging_api_api_client.get_default_rich_menu_id(
            )
          end

          # Get a list of users who added your LINE Official Account as a friend
          # This requests to <code>GET https://api.line.me/v2/bot/followers/ids</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param start [String, nil] Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.
          # @param limit [Integer, nil] The maximum number of user IDs to retrieve in a single request.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-follower-ids
          # @return [Array(Line::Bot::V2::MessagingApi::GetFollowersResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_followers_with_http_info( # steep:ignore MethodBodyTypeMismatch
            start: nil,
            limit: nil
          )
            @messaging_api_api_client.get_followers_with_http_info(
              start: start,
              limit: limit
            )
          end

          # Get a list of users who added your LINE Official Account as a friend
          # This requests to <code>GET https://api.line.me/v2/bot/followers/ids</code>
          # When you want to get HTTP status code or response headers, use {#get_followers_with_http_info} instead of this.
          #
          # @param start [String, nil] Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.
          # @param limit [Integer, nil] The maximum number of user IDs to retrieve in a single request.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-follower-ids
          # @return [Line::Bot::V2::MessagingApi::GetFollowersResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_followers(
            start: nil,
            limit: nil
          )
            @messaging_api_api_client.get_followers(
              start: start,
              limit: limit
            )
          end

          # Get number of users in a group chat
          # This requests to <code>GET https://api.line.me/v2/bot/group/{groupId}/members/count</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param group_id [String] Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-members-group-count
          # @return [Array(Line::Bot::V2::MessagingApi::GroupMemberCountResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_group_member_count_with_http_info( # steep:ignore MethodBodyTypeMismatch
            group_id:
          )
            @messaging_api_api_client.get_group_member_count_with_http_info(
              group_id: group_id
            )
          end

          # Get number of users in a group chat
          # This requests to <code>GET https://api.line.me/v2/bot/group/{groupId}/members/count</code>
          # When you want to get HTTP status code or response headers, use {#get_group_member_count_with_http_info} instead of this.
          #
          # @param group_id [String] Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-members-group-count
          # @return [Line::Bot::V2::MessagingApi::GroupMemberCountResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_group_member_count(
            group_id:
          )
            @messaging_api_api_client.get_group_member_count(
              group_id: group_id
            )
          end

          # Get group chat member profile
          # This requests to <code>GET https://api.line.me/v2/bot/group/{groupId}/member/{userId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param group_id [String] Group ID
          # @param user_id [String] User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-member-profile
          # @return [Array(Line::Bot::V2::MessagingApi::GroupUserProfileResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_group_member_profile_with_http_info( # steep:ignore MethodBodyTypeMismatch
            group_id:,
            user_id:
          )
            @messaging_api_api_client.get_group_member_profile_with_http_info(
              group_id: group_id,
              user_id: user_id
            )
          end

          # Get group chat member profile
          # This requests to <code>GET https://api.line.me/v2/bot/group/{groupId}/member/{userId}</code>
          # When you want to get HTTP status code or response headers, use {#get_group_member_profile_with_http_info} instead of this.
          #
          # @param group_id [String] Group ID
          # @param user_id [String] User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-member-profile
          # @return [Line::Bot::V2::MessagingApi::GroupUserProfileResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_group_member_profile(
            group_id:,
            user_id:
          )
            @messaging_api_api_client.get_group_member_profile(
              group_id: group_id,
              user_id: user_id
            )
          end

          # Get group chat member user IDs
          # This requests to <code>GET https://api.line.me/v2/bot/group/{groupId}/members/ids</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param group_id [String] Group ID
          # @param start [String, nil] Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-member-user-ids
          # @return [Array(Line::Bot::V2::MessagingApi::MembersIdsResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_group_members_ids_with_http_info( # steep:ignore MethodBodyTypeMismatch
            group_id:,
            start: nil
          )
            @messaging_api_api_client.get_group_members_ids_with_http_info(
              group_id: group_id,
              start: start
            )
          end

          # Get group chat member user IDs
          # This requests to <code>GET https://api.line.me/v2/bot/group/{groupId}/members/ids</code>
          # When you want to get HTTP status code or response headers, use {#get_group_members_ids_with_http_info} instead of this.
          #
          # @param group_id [String] Group ID
          # @param start [String, nil] Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-member-user-ids
          # @return [Line::Bot::V2::MessagingApi::MembersIdsResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_group_members_ids(
            group_id:,
            start: nil
          )
            @messaging_api_api_client.get_group_members_ids(
              group_id: group_id,
              start: start
            )
          end

          # Get group chat summary
          # This requests to <code>GET https://api.line.me/v2/bot/group/{groupId}/summary</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param group_id [String] Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-summary
          # @return [Array(Line::Bot::V2::MessagingApi::GroupSummaryResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_group_summary_with_http_info( # steep:ignore MethodBodyTypeMismatch
            group_id:
          )
            @messaging_api_api_client.get_group_summary_with_http_info(
              group_id: group_id
            )
          end

          # Get group chat summary
          # This requests to <code>GET https://api.line.me/v2/bot/group/{groupId}/summary</code>
          # When you want to get HTTP status code or response headers, use {#get_group_summary_with_http_info} instead of this.
          #
          # @param group_id [String] Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-summary
          # @return [Line::Bot::V2::MessagingApi::GroupSummaryResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_group_summary(
            group_id:
          )
            @messaging_api_api_client.get_group_summary(
              group_id: group_id
            )
          end

          # Get a list of user IDs who joined the membership.
          # This requests to <code>GET https://api.line.me/v2/bot/membership/{membershipId}/users/ids</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param membership_id [Integer] Membership plan ID.
          # @param start [String, nil] A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren't returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).
          # @param limit [Integer, nil] The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-membership-user-ids
          # @return [Array(Line::Bot::V2::MessagingApi::GetJoinedMembershipUsersResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 404
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_joined_membership_users_with_http_info( # steep:ignore MethodBodyTypeMismatch
            membership_id:,
            start: nil,
            limit: nil
          )
            @messaging_api_api_client.get_joined_membership_users_with_http_info(
              membership_id: membership_id,
              start: start,
              limit: limit
            )
          end

          # Get a list of user IDs who joined the membership.
          # This requests to <code>GET https://api.line.me/v2/bot/membership/{membershipId}/users/ids</code>
          # When you want to get HTTP status code or response headers, use {#get_joined_membership_users_with_http_info} instead of this.
          #
          # @param membership_id [Integer] Membership plan ID.
          # @param start [String, nil] A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren't returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).
          # @param limit [Integer, nil] The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-membership-user-ids
          # @return [Line::Bot::V2::MessagingApi::GetJoinedMembershipUsersResponse] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 404
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_joined_membership_users(
            membership_id:,
            start: nil,
            limit: nil
          )
            @messaging_api_api_client.get_joined_membership_users(
              membership_id: membership_id,
              start: start,
              limit: limit
            )
          end

          # Get a list of memberships.
          # This requests to <code>GET https://api.line.me/v2/bot/membership/list</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-membership-plans
          # @return [Array(Line::Bot::V2::MessagingApi::MembershipListResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 404
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_membership_list_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_membership_list_with_http_info(
            )
          end

          # Get a list of memberships.
          # This requests to <code>GET https://api.line.me/v2/bot/membership/list</code>
          # When you want to get HTTP status code or response headers, use {#get_membership_list_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-membership-plans
          # @return [Line::Bot::V2::MessagingApi::MembershipListResponse] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 404
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_membership_list(
          )
            @messaging_api_api_client.get_membership_list(
            )
          end

          # Get a user's membership subscription.
          # This requests to <code>GET https://api.line.me/v2/bot/membership/subscription/{userId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param user_id [String] User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-a-users-membership-subscription-status
          # @return [Array(Line::Bot::V2::MessagingApi::GetMembershipSubscriptionResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 404
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_membership_subscription_with_http_info( # steep:ignore MethodBodyTypeMismatch
            user_id:
          )
            @messaging_api_api_client.get_membership_subscription_with_http_info(
              user_id: user_id
            )
          end

          # Get a user's membership subscription.
          # This requests to <code>GET https://api.line.me/v2/bot/membership/subscription/{userId}</code>
          # When you want to get HTTP status code or response headers, use {#get_membership_subscription_with_http_info} instead of this.
          #
          # @param user_id [String] User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-a-users-membership-subscription-status
          # @return [Line::Bot::V2::MessagingApi::GetMembershipSubscriptionResponse] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 404
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_membership_subscription(
            user_id:
          )
            @messaging_api_api_client.get_membership_subscription(
              user_id: user_id
            )
          end

          # Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
          # This requests to <code>GET https://api.line.me/v2/bot/message/quota</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-quota
          # @return [Array(Line::Bot::V2::MessagingApi::MessageQuotaResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_message_quota_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_message_quota_with_http_info(
            )
          end

          # Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
          # This requests to <code>GET https://api.line.me/v2/bot/message/quota</code>
          # When you want to get HTTP status code or response headers, use {#get_message_quota_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-quota
          # @return [Line::Bot::V2::MessagingApi::MessageQuotaResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_message_quota(
          )
            @messaging_api_api_client.get_message_quota(
            )
          end

          # Gets the number of messages sent in the current month.
          # This requests to <code>GET https://api.line.me/v2/bot/message/quota/consumption</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-consumption
          # @return [Array(Line::Bot::V2::MessagingApi::QuotaConsumptionResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_message_quota_consumption_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_message_quota_consumption_with_http_info(
            )
          end

          # Gets the number of messages sent in the current month.
          # This requests to <code>GET https://api.line.me/v2/bot/message/quota/consumption</code>
          # When you want to get HTTP status code or response headers, use {#get_message_quota_consumption_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-consumption
          # @return [Line::Bot::V2::MessagingApi::QuotaConsumptionResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_message_quota_consumption(
          )
            @messaging_api_api_client.get_message_quota_consumption(
            )
          end

          # Gets the status of a narrowcast message.
          # This requests to <code>GET https://api.line.me/v2/bot/message/progress/narrowcast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param request_id [String] The narrowcast message's request ID. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-narrowcast-progress-status
          # @return [Array(Line::Bot::V2::MessagingApi::NarrowcastProgressResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_narrowcast_progress_with_http_info( # steep:ignore MethodBodyTypeMismatch
            request_id:
          )
            @messaging_api_api_client.get_narrowcast_progress_with_http_info(
              request_id: request_id
            )
          end

          # Gets the status of a narrowcast message.
          # This requests to <code>GET https://api.line.me/v2/bot/message/progress/narrowcast</code>
          # When you want to get HTTP status code or response headers, use {#get_narrowcast_progress_with_http_info} instead of this.
          #
          # @param request_id [String] The narrowcast message's request ID. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-narrowcast-progress-status
          # @return [Line::Bot::V2::MessagingApi::NarrowcastProgressResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_narrowcast_progress(
            request_id:
          )
            @messaging_api_api_client.get_narrowcast_progress(
              request_id: request_id
            )
          end

          # Get number of sent broadcast messages
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/broadcast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param date [String] Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-broadcast-messages
          # @return [Array(Line::Bot::V2::MessagingApi::NumberOfMessagesResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_number_of_sent_broadcast_messages_with_http_info( # steep:ignore MethodBodyTypeMismatch
            date:
          )
            @messaging_api_api_client.get_number_of_sent_broadcast_messages_with_http_info(
              date: date
            )
          end

          # Get number of sent broadcast messages
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/broadcast</code>
          # When you want to get HTTP status code or response headers, use {#get_number_of_sent_broadcast_messages_with_http_info} instead of this.
          #
          # @param date [String] Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-broadcast-messages
          # @return [Line::Bot::V2::MessagingApi::NumberOfMessagesResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_number_of_sent_broadcast_messages(
            date:
          )
            @messaging_api_api_client.get_number_of_sent_broadcast_messages(
              date: date
            )
          end

          # Get number of sent multicast messages
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/multicast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param date [String] Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-multicast-messages
          # @return [Array(Line::Bot::V2::MessagingApi::NumberOfMessagesResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_number_of_sent_multicast_messages_with_http_info( # steep:ignore MethodBodyTypeMismatch
            date:
          )
            @messaging_api_api_client.get_number_of_sent_multicast_messages_with_http_info(
              date: date
            )
          end

          # Get number of sent multicast messages
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/multicast</code>
          # When you want to get HTTP status code or response headers, use {#get_number_of_sent_multicast_messages_with_http_info} instead of this.
          #
          # @param date [String] Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-multicast-messages
          # @return [Line::Bot::V2::MessagingApi::NumberOfMessagesResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_number_of_sent_multicast_messages(
            date:
          )
            @messaging_api_api_client.get_number_of_sent_multicast_messages(
              date: date
            )
          end

          # Get number of sent push messages
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/push</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param date [String] Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-push-messages
          # @return [Array(Line::Bot::V2::MessagingApi::NumberOfMessagesResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_number_of_sent_push_messages_with_http_info( # steep:ignore MethodBodyTypeMismatch
            date:
          )
            @messaging_api_api_client.get_number_of_sent_push_messages_with_http_info(
              date: date
            )
          end

          # Get number of sent push messages
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/push</code>
          # When you want to get HTTP status code or response headers, use {#get_number_of_sent_push_messages_with_http_info} instead of this.
          #
          # @param date [String] Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-push-messages
          # @return [Line::Bot::V2::MessagingApi::NumberOfMessagesResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_number_of_sent_push_messages(
            date:
          )
            @messaging_api_api_client.get_number_of_sent_push_messages(
              date: date
            )
          end

          # Get number of sent reply messages
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/reply</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param date [String] Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-reply-messages
          # @return [Array(Line::Bot::V2::MessagingApi::NumberOfMessagesResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_number_of_sent_reply_messages_with_http_info( # steep:ignore MethodBodyTypeMismatch
            date:
          )
            @messaging_api_api_client.get_number_of_sent_reply_messages_with_http_info(
              date: date
            )
          end

          # Get number of sent reply messages
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/reply</code>
          # When you want to get HTTP status code or response headers, use {#get_number_of_sent_reply_messages_with_http_info} instead of this.
          #
          # @param date [String] Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-reply-messages
          # @return [Line::Bot::V2::MessagingApi::NumberOfMessagesResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_number_of_sent_reply_messages(
            date:
          )
            @messaging_api_api_client.get_number_of_sent_reply_messages(
              date: date
            )
          end

          # Get number of sent LINE notification messages　
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/pnp</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param date [String] Date the message was sent  Format: `yyyyMMdd` (Example:`20211231`) Time zone: UTC+9
          # @see https://developers.line.biz/en/reference/partner-docs/#get-number-of-sent-line-notification-messages
          # @return [Array(Line::Bot::V2::MessagingApi::NumberOfMessagesResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_pnp_message_statistics_with_http_info( # steep:ignore MethodBodyTypeMismatch
            date:
          )
            @messaging_api_api_client.get_pnp_message_statistics_with_http_info(
              date: date
            )
          end

          # Get number of sent LINE notification messages　
          # This requests to <code>GET https://api.line.me/v2/bot/message/delivery/pnp</code>
          # When you want to get HTTP status code or response headers, use {#get_pnp_message_statistics_with_http_info} instead of this.
          #
          # @param date [String] Date the message was sent  Format: `yyyyMMdd` (Example:`20211231`) Time zone: UTC+9
          # @see https://developers.line.biz/en/reference/partner-docs/#get-number-of-sent-line-notification-messages
          # @return [Line::Bot::V2::MessagingApi::NumberOfMessagesResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_pnp_message_statistics(
            date:
          )
            @messaging_api_api_client.get_pnp_message_statistics(
              date: date
            )
          end

          # Get profile
          # This requests to <code>GET https://api.line.me/v2/bot/profile/{userId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param user_id [String] User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-profile
          # @return [Array(Line::Bot::V2::MessagingApi::UserProfileResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_profile_with_http_info( # steep:ignore MethodBodyTypeMismatch
            user_id:
          )
            @messaging_api_api_client.get_profile_with_http_info(
              user_id: user_id
            )
          end

          # Get profile
          # This requests to <code>GET https://api.line.me/v2/bot/profile/{userId}</code>
          # When you want to get HTTP status code or response headers, use {#get_profile_with_http_info} instead of this.
          #
          # @param user_id [String] User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-profile
          # @return [Line::Bot::V2::MessagingApi::UserProfileResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_profile(
            user_id:
          )
            @messaging_api_api_client.get_profile(
              user_id: user_id
            )
          end

          # Gets a rich menu via a rich menu ID.
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/{richMenuId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_id [String] ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu
          # @return [Array(Line::Bot::V2::MessagingApi::RichMenuResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_rich_menu_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_id:
          )
            @messaging_api_api_client.get_rich_menu_with_http_info(
              rich_menu_id: rich_menu_id
            )
          end

          # Gets a rich menu via a rich menu ID.
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/{richMenuId}</code>
          # When you want to get HTTP status code or response headers, use {#get_rich_menu_with_http_info} instead of this.
          #
          # @param rich_menu_id [String] ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu
          # @return [Line::Bot::V2::MessagingApi::RichMenuResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_rich_menu(
            rich_menu_id:
          )
            @messaging_api_api_client.get_rich_menu(
              rich_menu_id: rich_menu_id
            )
          end

          # Get rich menu alias information
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_alias_id [String] The rich menu alias ID whose information you want to obtain.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-by-id
          # @return [Array(Line::Bot::V2::MessagingApi::RichMenuAliasResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_rich_menu_alias_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_alias_id:
          )
            @messaging_api_api_client.get_rich_menu_alias_with_http_info(
              rich_menu_alias_id: rich_menu_alias_id
            )
          end

          # Get rich menu alias information
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}</code>
          # When you want to get HTTP status code or response headers, use {#get_rich_menu_alias_with_http_info} instead of this.
          #
          # @param rich_menu_alias_id [String] The rich menu alias ID whose information you want to obtain.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-by-id
          # @return [Line::Bot::V2::MessagingApi::RichMenuAliasResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_rich_menu_alias(
            rich_menu_alias_id:
          )
            @messaging_api_api_client.get_rich_menu_alias(
              rich_menu_alias_id: rich_menu_alias_id
            )
          end

          # Get list of rich menu alias
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/alias/list</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-list
          # @return [Array(Line::Bot::V2::MessagingApi::RichMenuAliasListResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_rich_menu_alias_list_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_rich_menu_alias_list_with_http_info(
            )
          end

          # Get list of rich menu alias
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/alias/list</code>
          # When you want to get HTTP status code or response headers, use {#get_rich_menu_alias_list_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-list
          # @return [Line::Bot::V2::MessagingApi::RichMenuAliasListResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_rich_menu_alias_list(
          )
            @messaging_api_api_client.get_rich_menu_alias_list(
            )
          end

          # Get the status of Replace or unlink a linked rich menus in batches.
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/progress/batch</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param request_id [String] A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-batch-control-rich-menus-progress-status
          # @return [Array(Line::Bot::V2::MessagingApi::RichMenuBatchProgressResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_rich_menu_batch_progress_with_http_info( # steep:ignore MethodBodyTypeMismatch
            request_id:
          )
            @messaging_api_api_client.get_rich_menu_batch_progress_with_http_info(
              request_id: request_id
            )
          end

          # Get the status of Replace or unlink a linked rich menus in batches.
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/progress/batch</code>
          # When you want to get HTTP status code or response headers, use {#get_rich_menu_batch_progress_with_http_info} instead of this.
          #
          # @param request_id [String] A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-batch-control-rich-menus-progress-status
          # @return [Line::Bot::V2::MessagingApi::RichMenuBatchProgressResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_rich_menu_batch_progress(
            request_id:
          )
            @messaging_api_api_client.get_rich_menu_batch_progress(
              request_id: request_id
            )
          end

          # Get rich menu ID of user
          # This requests to <code>GET https://api.line.me/v2/bot/user/{userId}/richmenu</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param user_id [String] User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-id-of-user
          # @return [Array(Line::Bot::V2::MessagingApi::RichMenuIdResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_rich_menu_id_of_user_with_http_info( # steep:ignore MethodBodyTypeMismatch
            user_id:
          )
            @messaging_api_api_client.get_rich_menu_id_of_user_with_http_info(
              user_id: user_id
            )
          end

          # Get rich menu ID of user
          # This requests to <code>GET https://api.line.me/v2/bot/user/{userId}/richmenu</code>
          # When you want to get HTTP status code or response headers, use {#get_rich_menu_id_of_user_with_http_info} instead of this.
          #
          # @param user_id [String] User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-id-of-user
          # @return [Line::Bot::V2::MessagingApi::RichMenuIdResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_rich_menu_id_of_user(
            user_id:
          )
            @messaging_api_api_client.get_rich_menu_id_of_user(
              user_id: user_id
            )
          end

          # Get rich menu list
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/list</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-list
          # @return [Array(Line::Bot::V2::MessagingApi::RichMenuListResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_rich_menu_list_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_rich_menu_list_with_http_info(
            )
          end

          # Get rich menu list
          # This requests to <code>GET https://api.line.me/v2/bot/richmenu/list</code>
          # When you want to get HTTP status code or response headers, use {#get_rich_menu_list_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-list
          # @return [Line::Bot::V2::MessagingApi::RichMenuListResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_rich_menu_list(
          )
            @messaging_api_api_client.get_rich_menu_list(
            )
          end

          # Get number of users in a multi-person chat
          # This requests to <code>GET https://api.line.me/v2/bot/room/{roomId}/members/count</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param room_id [String] Room ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-members-room-count
          # @return [Array(Line::Bot::V2::MessagingApi::RoomMemberCountResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_room_member_count_with_http_info( # steep:ignore MethodBodyTypeMismatch
            room_id:
          )
            @messaging_api_api_client.get_room_member_count_with_http_info(
              room_id: room_id
            )
          end

          # Get number of users in a multi-person chat
          # This requests to <code>GET https://api.line.me/v2/bot/room/{roomId}/members/count</code>
          # When you want to get HTTP status code or response headers, use {#get_room_member_count_with_http_info} instead of this.
          #
          # @param room_id [String] Room ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-members-room-count
          # @return [Line::Bot::V2::MessagingApi::RoomMemberCountResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_room_member_count(
            room_id:
          )
            @messaging_api_api_client.get_room_member_count(
              room_id: room_id
            )
          end

          # Get multi-person chat member profile
          # This requests to <code>GET https://api.line.me/v2/bot/room/{roomId}/member/{userId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param room_id [String] Room ID
          # @param user_id [String] User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-room-member-profile
          # @return [Array(Line::Bot::V2::MessagingApi::RoomUserProfileResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_room_member_profile_with_http_info( # steep:ignore MethodBodyTypeMismatch
            room_id:,
            user_id:
          )
            @messaging_api_api_client.get_room_member_profile_with_http_info(
              room_id: room_id,
              user_id: user_id
            )
          end

          # Get multi-person chat member profile
          # This requests to <code>GET https://api.line.me/v2/bot/room/{roomId}/member/{userId}</code>
          # When you want to get HTTP status code or response headers, use {#get_room_member_profile_with_http_info} instead of this.
          #
          # @param room_id [String] Room ID
          # @param user_id [String] User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-room-member-profile
          # @return [Line::Bot::V2::MessagingApi::RoomUserProfileResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_room_member_profile(
            room_id:,
            user_id:
          )
            @messaging_api_api_client.get_room_member_profile(
              room_id: room_id,
              user_id: user_id
            )
          end

          # Get multi-person chat member user IDs
          # This requests to <code>GET https://api.line.me/v2/bot/room/{roomId}/members/ids</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param room_id [String] Room ID
          # @param start [String, nil] Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-room-member-user-ids
          # @return [Array(Line::Bot::V2::MessagingApi::MembersIdsResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_room_members_ids_with_http_info( # steep:ignore MethodBodyTypeMismatch
            room_id:,
            start: nil
          )
            @messaging_api_api_client.get_room_members_ids_with_http_info(
              room_id: room_id,
              start: start
            )
          end

          # Get multi-person chat member user IDs
          # This requests to <code>GET https://api.line.me/v2/bot/room/{roomId}/members/ids</code>
          # When you want to get HTTP status code or response headers, use {#get_room_members_ids_with_http_info} instead of this.
          #
          # @param room_id [String] Room ID
          # @param start [String, nil] Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-room-member-user-ids
          # @return [Line::Bot::V2::MessagingApi::MembersIdsResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_room_members_ids(
            room_id:,
            start: nil
          )
            @messaging_api_api_client.get_room_members_ids(
              room_id: room_id,
              start: start
            )
          end

          # Get webhook endpoint information
          # This requests to <code>GET https://api.line.me/v2/bot/channel/webhook/endpoint</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-webhook-endpoint-information
          # @return [Array(Line::Bot::V2::MessagingApi::GetWebhookEndpointResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_webhook_endpoint_with_http_info( # steep:ignore MethodBodyTypeMismatch
          )
            @messaging_api_api_client.get_webhook_endpoint_with_http_info(
            )
          end

          # Get webhook endpoint information
          # This requests to <code>GET https://api.line.me/v2/bot/channel/webhook/endpoint</code>
          # When you want to get HTTP status code or response headers, use {#get_webhook_endpoint_with_http_info} instead of this.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-webhook-endpoint-information
          # @return [Line::Bot::V2::MessagingApi::GetWebhookEndpointResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_webhook_endpoint(
          )
            @messaging_api_api_client.get_webhook_endpoint(
            )
          end

          # Issue link token
          # This requests to <code>POST https://api.line.me/v2/bot/user/{userId}/linkToken</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param user_id [String] User ID for the LINE account to be linked. Found in the `source` object of account link event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-link-token
          # @return [Array(Line::Bot::V2::MessagingApi::IssueLinkTokenResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def issue_link_token_with_http_info( # steep:ignore MethodBodyTypeMismatch
            user_id:
          )
            @messaging_api_api_client.issue_link_token_with_http_info(
              user_id: user_id
            )
          end

          # Issue link token
          # This requests to <code>POST https://api.line.me/v2/bot/user/{userId}/linkToken</code>
          # When you want to get HTTP status code or response headers, use {#issue_link_token_with_http_info} instead of this.
          #
          # @param user_id [String] User ID for the LINE account to be linked. Found in the `source` object of account link event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-link-token
          # @return [Line::Bot::V2::MessagingApi::IssueLinkTokenResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def issue_link_token(
            user_id:
          )
            @messaging_api_api_client.issue_link_token(
              user_id: user_id
            )
          end

          # Leave group chat
          # This requests to <code>POST https://api.line.me/v2/bot/group/{groupId}/leave</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param group_id [String] Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#leave-group
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 404
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def leave_group_with_http_info( # steep:ignore MethodBodyTypeMismatch
            group_id:
          )
            @messaging_api_api_client.leave_group_with_http_info(
              group_id: group_id
            )
          end

          # Leave group chat
          # This requests to <code>POST https://api.line.me/v2/bot/group/{groupId}/leave</code>
          # When you want to get HTTP status code or response headers, use {#leave_group_with_http_info} instead of this.
          #
          # @param group_id [String] Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#leave-group
          # @return [String, nil] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 404
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def leave_group(
            group_id:
          )
            @messaging_api_api_client.leave_group(
              group_id: group_id
            )
          end

          # Leave multi-person chat
          # This requests to <code>POST https://api.line.me/v2/bot/room/{roomId}/leave</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param room_id [String] Room ID
          # @see https://developers.line.biz/en/reference/messaging-api/#leave-room
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def leave_room_with_http_info( # steep:ignore MethodBodyTypeMismatch
            room_id:
          )
            @messaging_api_api_client.leave_room_with_http_info(
              room_id: room_id
            )
          end

          # Leave multi-person chat
          # This requests to <code>POST https://api.line.me/v2/bot/room/{roomId}/leave</code>
          # When you want to get HTTP status code or response headers, use {#leave_room_with_http_info} instead of this.
          #
          # @param room_id [String] Room ID
          # @see https://developers.line.biz/en/reference/messaging-api/#leave-room
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def leave_room(
            room_id:
          )
            @messaging_api_api_client.leave_room(
              room_id: room_id
            )
          end

          # Link rich menu to user.
          # This requests to <code>POST https://api.line.me/v2/bot/user/{userId}/richmenu/{richMenuId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param user_id [String] User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @param rich_menu_id [String] ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-user
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def link_rich_menu_id_to_user_with_http_info( # steep:ignore MethodBodyTypeMismatch
            user_id:,
            rich_menu_id:
          )
            @messaging_api_api_client.link_rich_menu_id_to_user_with_http_info(
              user_id: user_id,
              rich_menu_id: rich_menu_id
            )
          end

          # Link rich menu to user.
          # This requests to <code>POST https://api.line.me/v2/bot/user/{userId}/richmenu/{richMenuId}</code>
          # When you want to get HTTP status code or response headers, use {#link_rich_menu_id_to_user_with_http_info} instead of this.
          #
          # @param user_id [String] User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @param rich_menu_id [String] ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-user
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def link_rich_menu_id_to_user(
            user_id:,
            rich_menu_id:
          )
            @messaging_api_api_client.link_rich_menu_id_to_user(
              user_id: user_id,
              rich_menu_id: rich_menu_id
            )
          end

          # Link rich menu to multiple users
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/bulk/link</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_bulk_link_request [RichMenuBulkLinkRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-users
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def link_rich_menu_id_to_users_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_bulk_link_request:
          )
            @messaging_api_api_client.link_rich_menu_id_to_users_with_http_info(
              rich_menu_bulk_link_request: rich_menu_bulk_link_request
            )
          end

          # Link rich menu to multiple users
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/bulk/link</code>
          # When you want to get HTTP status code or response headers, use {#link_rich_menu_id_to_users_with_http_info} instead of this.
          #
          # @param rich_menu_bulk_link_request [RichMenuBulkLinkRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-users
          # @return [String, nil] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def link_rich_menu_id_to_users(
            rich_menu_bulk_link_request:
          )
            @messaging_api_api_client.link_rich_menu_id_to_users(
              rich_menu_bulk_link_request: rich_menu_bulk_link_request
            )
          end

          # Mark messages from users as read
          # This requests to <code>POST https://api.line.me/v2/bot/message/markAsRead</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param mark_messages_as_read_request [MarkMessagesAsReadRequest]
          # @see https://developers.line.biz/en/reference/partner-docs/#mark-messages-from-users-as-read
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def mark_messages_as_read_with_http_info( # steep:ignore MethodBodyTypeMismatch
            mark_messages_as_read_request:
          )
            @messaging_api_api_client.mark_messages_as_read_with_http_info(
              mark_messages_as_read_request: mark_messages_as_read_request
            )
          end

          # Mark messages from users as read
          # This requests to <code>POST https://api.line.me/v2/bot/message/markAsRead</code>
          # When you want to get HTTP status code or response headers, use {#mark_messages_as_read_with_http_info} instead of this.
          #
          # @param mark_messages_as_read_request [MarkMessagesAsReadRequest]
          # @see https://developers.line.biz/en/reference/partner-docs/#mark-messages-from-users-as-read
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def mark_messages_as_read(
            mark_messages_as_read_request:
          )
            @messaging_api_api_client.mark_messages_as_read(
              mark_messages_as_read_request: mark_messages_as_read_request
            )
          end

          # An API that efficiently sends the same message to multiple user IDs. You can't send messages to group chats or multi-person chats.
          # This requests to <code>POST https://api.line.me/v2/bot/message/multicast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param multicast_request [MulticastRequest]
          # @param x_line_retry_key [String, nil] Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.
          # @see https://developers.line.biz/en/reference/messaging-api/#send-multicast-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 403
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 409
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 429
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def multicast_with_http_info( # steep:ignore MethodBodyTypeMismatch
            multicast_request:,
            x_line_retry_key: nil
          )
            @messaging_api_api_client.multicast_with_http_info(
              multicast_request: multicast_request,
              x_line_retry_key: x_line_retry_key
            )
          end

          # An API that efficiently sends the same message to multiple user IDs. You can't send messages to group chats or multi-person chats.
          # This requests to <code>POST https://api.line.me/v2/bot/message/multicast</code>
          # When you want to get HTTP status code or response headers, use {#multicast_with_http_info} instead of this.
          #
          # @param multicast_request [MulticastRequest]
          # @param x_line_retry_key [String, nil] Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.
          # @see https://developers.line.biz/en/reference/messaging-api/#send-multicast-message
          # @return [String, nil] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 403
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 409
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 429
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def multicast(
            multicast_request:,
            x_line_retry_key: nil
          )
            @messaging_api_api_client.multicast(
              multicast_request: multicast_request,
              x_line_retry_key: x_line_retry_key
            )
          end

          # Send narrowcast message
          # This requests to <code>POST https://api.line.me/v2/bot/message/narrowcast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param narrowcast_request [NarrowcastRequest]
          # @param x_line_retry_key [String, nil] Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.
          # @see https://developers.line.biz/en/reference/messaging-api/#send-narrowcast-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 403
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 409
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 429
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def narrowcast_with_http_info( # steep:ignore MethodBodyTypeMismatch
            narrowcast_request:,
            x_line_retry_key: nil
          )
            @messaging_api_api_client.narrowcast_with_http_info(
              narrowcast_request: narrowcast_request,
              x_line_retry_key: x_line_retry_key
            )
          end

          # Send narrowcast message
          # This requests to <code>POST https://api.line.me/v2/bot/message/narrowcast</code>
          # When you want to get HTTP status code or response headers, use {#narrowcast_with_http_info} instead of this.
          #
          # @param narrowcast_request [NarrowcastRequest]
          # @param x_line_retry_key [String, nil] Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.
          # @see https://developers.line.biz/en/reference/messaging-api/#send-narrowcast-message
          # @return [String, nil] when HTTP status code is 202
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 403
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 409
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 429
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def narrowcast(
            narrowcast_request:,
            x_line_retry_key: nil
          )
            @messaging_api_api_client.narrowcast(
              narrowcast_request: narrowcast_request,
              x_line_retry_key: x_line_retry_key
            )
          end

          # Sends a message to a user, group chat, or multi-person chat at any time.
          # This requests to <code>POST https://api.line.me/v2/bot/message/push</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param push_message_request [PushMessageRequest]
          # @param x_line_retry_key [String, nil] Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.
          # @see https://developers.line.biz/en/reference/messaging-api/#send-push-message
          # @return [Array(Line::Bot::V2::MessagingApi::PushMessageResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 403
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 409
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 429
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def push_message_with_http_info( # steep:ignore MethodBodyTypeMismatch
            push_message_request:,
            x_line_retry_key: nil
          )
            @messaging_api_api_client.push_message_with_http_info(
              push_message_request: push_message_request,
              x_line_retry_key: x_line_retry_key
            )
          end

          # Sends a message to a user, group chat, or multi-person chat at any time.
          # This requests to <code>POST https://api.line.me/v2/bot/message/push</code>
          # When you want to get HTTP status code or response headers, use {#push_message_with_http_info} instead of this.
          #
          # @param push_message_request [PushMessageRequest]
          # @param x_line_retry_key [String, nil] Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.
          # @see https://developers.line.biz/en/reference/messaging-api/#send-push-message
          # @return [Line::Bot::V2::MessagingApi::PushMessageResponse] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 403
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 409
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 429
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def push_message(
            push_message_request:,
            x_line_retry_key: nil
          )
            @messaging_api_api_client.push_message(
              push_message_request: push_message_request,
              x_line_retry_key: x_line_retry_key
            )
          end

          # Send LINE notification message
          # This requests to <code>POST https://api.line.me/bot/pnp/push</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param pnp_messages_request [PnpMessagesRequest]
          # @param x_line_delivery_tag [String, nil] String returned in the delivery.data property of the delivery completion event via Webhook.
          # @see https://developers.line.biz/en/reference/partner-docs/#send-line-notification-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 422
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def push_messages_by_phone_with_http_info( # steep:ignore MethodBodyTypeMismatch
            pnp_messages_request:,
            x_line_delivery_tag: nil
          )
            @messaging_api_api_client.push_messages_by_phone_with_http_info(
              pnp_messages_request: pnp_messages_request,
              x_line_delivery_tag: x_line_delivery_tag
            )
          end

          # Send LINE notification message
          # This requests to <code>POST https://api.line.me/bot/pnp/push</code>
          # When you want to get HTTP status code or response headers, use {#push_messages_by_phone_with_http_info} instead of this.
          #
          # @param pnp_messages_request [PnpMessagesRequest]
          # @param x_line_delivery_tag [String, nil] String returned in the delivery.data property of the delivery completion event via Webhook.
          # @see https://developers.line.biz/en/reference/partner-docs/#send-line-notification-message
          # @return [String, nil] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 422
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def push_messages_by_phone(
            pnp_messages_request:,
            x_line_delivery_tag: nil
          )
            @messaging_api_api_client.push_messages_by_phone(
              pnp_messages_request: pnp_messages_request,
              x_line_delivery_tag: x_line_delivery_tag
            )
          end

          # Send reply message
          # This requests to <code>POST https://api.line.me/v2/bot/message/reply</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param reply_message_request [ReplyMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#send-reply-message
          # @return [Array(Line::Bot::V2::MessagingApi::ReplyMessageResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 429
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def reply_message_with_http_info( # steep:ignore MethodBodyTypeMismatch
            reply_message_request:
          )
            @messaging_api_api_client.reply_message_with_http_info(
              reply_message_request: reply_message_request
            )
          end

          # Send reply message
          # This requests to <code>POST https://api.line.me/v2/bot/message/reply</code>
          # When you want to get HTTP status code or response headers, use {#reply_message_with_http_info} instead of this.
          #
          # @param reply_message_request [ReplyMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#send-reply-message
          # @return [Line::Bot::V2::MessagingApi::ReplyMessageResponse] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 429
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def reply_message(
            reply_message_request:
          )
            @messaging_api_api_client.reply_message(
              reply_message_request: reply_message_request
            )
          end

          # You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/batch</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_batch_request [RichMenuBatchRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#batch-control-rich-menus-of-users
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def rich_menu_batch_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_batch_request:
          )
            @messaging_api_api_client.rich_menu_batch_with_http_info(
              rich_menu_batch_request: rich_menu_batch_request
            )
          end

          # You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/batch</code>
          # When you want to get HTTP status code or response headers, use {#rich_menu_batch_with_http_info} instead of this.
          #
          # @param rich_menu_batch_request [RichMenuBatchRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#batch-control-rich-menus-of-users
          # @return [String, nil] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def rich_menu_batch(
            rich_menu_batch_request:
          )
            @messaging_api_api_client.rich_menu_batch(
              rich_menu_batch_request: rich_menu_batch_request
            )
          end

          # Set default rich menu
          # This requests to <code>POST https://api.line.me/v2/bot/user/all/richmenu/{richMenuId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_id [String] ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#set-default-rich-menu
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def set_default_rich_menu_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_id:
          )
            @messaging_api_api_client.set_default_rich_menu_with_http_info(
              rich_menu_id: rich_menu_id
            )
          end

          # Set default rich menu
          # This requests to <code>POST https://api.line.me/v2/bot/user/all/richmenu/{richMenuId}</code>
          # When you want to get HTTP status code or response headers, use {#set_default_rich_menu_with_http_info} instead of this.
          #
          # @param rich_menu_id [String] ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#set-default-rich-menu
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def set_default_rich_menu(
            rich_menu_id:
          )
            @messaging_api_api_client.set_default_rich_menu(
              rich_menu_id: rich_menu_id
            )
          end

          # Set webhook endpoint URL
          # This requests to <code>PUT https://api.line.me/v2/bot/channel/webhook/endpoint</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param set_webhook_endpoint_request [SetWebhookEndpointRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#set-webhook-endpoint-url
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def set_webhook_endpoint_with_http_info( # steep:ignore MethodBodyTypeMismatch
            set_webhook_endpoint_request:
          )
            @messaging_api_api_client.set_webhook_endpoint_with_http_info(
              set_webhook_endpoint_request: set_webhook_endpoint_request
            )
          end

          # Set webhook endpoint URL
          # This requests to <code>PUT https://api.line.me/v2/bot/channel/webhook/endpoint</code>
          # When you want to get HTTP status code or response headers, use {#set_webhook_endpoint_with_http_info} instead of this.
          #
          # @param set_webhook_endpoint_request [SetWebhookEndpointRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#set-webhook-endpoint-url
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def set_webhook_endpoint(
            set_webhook_endpoint_request:
          )
            @messaging_api_api_client.set_webhook_endpoint(
              set_webhook_endpoint_request: set_webhook_endpoint_request
            )
          end

          # Display a loading animation in one-on-one chats between users and LINE Official Accounts.
          # This requests to <code>POST https://api.line.me/v2/bot/chat/loading/start</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param show_loading_animation_request [ShowLoadingAnimationRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#display-a-loading-indicator
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def show_loading_animation_with_http_info( # steep:ignore MethodBodyTypeMismatch
            show_loading_animation_request:
          )
            @messaging_api_api_client.show_loading_animation_with_http_info(
              show_loading_animation_request: show_loading_animation_request
            )
          end

          # Display a loading animation in one-on-one chats between users and LINE Official Accounts.
          # This requests to <code>POST https://api.line.me/v2/bot/chat/loading/start</code>
          # When you want to get HTTP status code or response headers, use {#show_loading_animation_with_http_info} instead of this.
          #
          # @param show_loading_animation_request [ShowLoadingAnimationRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#display-a-loading-indicator
          # @return [String, nil] when HTTP status code is 202
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def show_loading_animation(
            show_loading_animation_request:
          )
            @messaging_api_api_client.show_loading_animation(
              show_loading_animation_request: show_loading_animation_request
            )
          end

          # Test webhook endpoint
          # This requests to <code>POST https://api.line.me/v2/bot/channel/webhook/test</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param test_webhook_endpoint_request [TestWebhookEndpointRequest, nil]
          # @see https://developers.line.biz/en/reference/messaging-api/#test-webhook-endpoint
          # @return [Array(Line::Bot::V2::MessagingApi::TestWebhookEndpointResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def test_webhook_endpoint_with_http_info( # steep:ignore MethodBodyTypeMismatch
            test_webhook_endpoint_request: nil
          )
            @messaging_api_api_client.test_webhook_endpoint_with_http_info(
              test_webhook_endpoint_request: test_webhook_endpoint_request
            )
          end

          # Test webhook endpoint
          # This requests to <code>POST https://api.line.me/v2/bot/channel/webhook/test</code>
          # When you want to get HTTP status code or response headers, use {#test_webhook_endpoint_with_http_info} instead of this.
          #
          # @param test_webhook_endpoint_request [TestWebhookEndpointRequest, nil]
          # @see https://developers.line.biz/en/reference/messaging-api/#test-webhook-endpoint
          # @return [Line::Bot::V2::MessagingApi::TestWebhookEndpointResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def test_webhook_endpoint(
            test_webhook_endpoint_request: nil
          )
            @messaging_api_api_client.test_webhook_endpoint(
              test_webhook_endpoint_request: test_webhook_endpoint_request
            )
          end

          # Unlink rich menu from user
          # This requests to <code>DELETE https://api.line.me/v2/bot/user/{userId}/richmenu</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param user_id [String] User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-user
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def unlink_rich_menu_id_from_user_with_http_info( # steep:ignore MethodBodyTypeMismatch
            user_id:
          )
            @messaging_api_api_client.unlink_rich_menu_id_from_user_with_http_info(
              user_id: user_id
            )
          end

          # Unlink rich menu from user
          # This requests to <code>DELETE https://api.line.me/v2/bot/user/{userId}/richmenu</code>
          # When you want to get HTTP status code or response headers, use {#unlink_rich_menu_id_from_user_with_http_info} instead of this.
          #
          # @param user_id [String] User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-user
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def unlink_rich_menu_id_from_user(
            user_id:
          )
            @messaging_api_api_client.unlink_rich_menu_id_from_user(
              user_id: user_id
            )
          end

          # Unlink rich menus from multiple users
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/bulk/unlink</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_bulk_unlink_request [RichMenuBulkUnlinkRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-users
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 202
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def unlink_rich_menu_id_from_users_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_bulk_unlink_request:
          )
            @messaging_api_api_client.unlink_rich_menu_id_from_users_with_http_info(
              rich_menu_bulk_unlink_request: rich_menu_bulk_unlink_request
            )
          end

          # Unlink rich menus from multiple users
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/bulk/unlink</code>
          # When you want to get HTTP status code or response headers, use {#unlink_rich_menu_id_from_users_with_http_info} instead of this.
          #
          # @param rich_menu_bulk_unlink_request [RichMenuBulkUnlinkRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-users
          # @return [String, nil] when HTTP status code is 202
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def unlink_rich_menu_id_from_users(
            rich_menu_bulk_unlink_request:
          )
            @messaging_api_api_client.unlink_rich_menu_id_from_users(
              rich_menu_bulk_unlink_request: rich_menu_bulk_unlink_request
            )
          end

          # Update rich menu alias
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_alias_id [String] The rich menu alias ID you want to update.
          # @param update_rich_menu_alias_request [UpdateRichMenuAliasRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#update-rich-menu-alias
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array(Line::Bot::V2::MessagingApi::ErrorResponse, Integer, Hash{String => String})] when HTTP status code is 400
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def update_rich_menu_alias_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_alias_id:,
            update_rich_menu_alias_request:
          )
            @messaging_api_api_client.update_rich_menu_alias_with_http_info(
              rich_menu_alias_id: rich_menu_alias_id,
              update_rich_menu_alias_request: update_rich_menu_alias_request
            )
          end

          # Update rich menu alias
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}</code>
          # When you want to get HTTP status code or response headers, use {#update_rich_menu_alias_with_http_info} instead of this.
          #
          # @param rich_menu_alias_id [String] The rich menu alias ID you want to update.
          # @param update_rich_menu_alias_request [UpdateRichMenuAliasRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#update-rich-menu-alias
          # @return [String, nil] when HTTP status code is 200
          # @return [Line::Bot::V2::MessagingApi::ErrorResponse] when HTTP status code is 400
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def update_rich_menu_alias(
            rich_menu_alias_id:,
            update_rich_menu_alias_request:
          )
            @messaging_api_api_client.update_rich_menu_alias(
              rich_menu_alias_id: rich_menu_alias_id,
              update_rich_menu_alias_request: update_rich_menu_alias_request
            )
          end

          # Validate message objects of a broadcast message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/broadcast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-broadcast-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def validate_broadcast_with_http_info( # steep:ignore MethodBodyTypeMismatch
            validate_message_request:
          )
            @messaging_api_api_client.validate_broadcast_with_http_info(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a broadcast message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/broadcast</code>
          # When you want to get HTTP status code or response headers, use {#validate_broadcast_with_http_info} instead of this.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-broadcast-message
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def validate_broadcast(
            validate_message_request:
          )
            @messaging_api_api_client.validate_broadcast(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a multicast message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/multicast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-multicast-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def validate_multicast_with_http_info( # steep:ignore MethodBodyTypeMismatch
            validate_message_request:
          )
            @messaging_api_api_client.validate_multicast_with_http_info(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a multicast message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/multicast</code>
          # When you want to get HTTP status code or response headers, use {#validate_multicast_with_http_info} instead of this.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-multicast-message
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def validate_multicast(
            validate_message_request:
          )
            @messaging_api_api_client.validate_multicast(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a narrowcast message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/narrowcast</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-narrowcast-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def validate_narrowcast_with_http_info( # steep:ignore MethodBodyTypeMismatch
            validate_message_request:
          )
            @messaging_api_api_client.validate_narrowcast_with_http_info(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a narrowcast message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/narrowcast</code>
          # When you want to get HTTP status code or response headers, use {#validate_narrowcast_with_http_info} instead of this.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-narrowcast-message
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def validate_narrowcast(
            validate_message_request:
          )
            @messaging_api_api_client.validate_narrowcast(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a push message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/push</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-push-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def validate_push_with_http_info( # steep:ignore MethodBodyTypeMismatch
            validate_message_request:
          )
            @messaging_api_api_client.validate_push_with_http_info(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a push message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/push</code>
          # When you want to get HTTP status code or response headers, use {#validate_push_with_http_info} instead of this.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-push-message
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def validate_push(
            validate_message_request:
          )
            @messaging_api_api_client.validate_push(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a reply message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/reply</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-reply-message
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def validate_reply_with_http_info( # steep:ignore MethodBodyTypeMismatch
            validate_message_request:
          )
            @messaging_api_api_client.validate_reply_with_http_info(
              validate_message_request: validate_message_request
            )
          end

          # Validate message objects of a reply message
          # This requests to <code>POST https://api.line.me/v2/bot/message/validate/reply</code>
          # When you want to get HTTP status code or response headers, use {#validate_reply_with_http_info} instead of this.
          #
          # @param validate_message_request [ValidateMessageRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-reply-message
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def validate_reply(
            validate_message_request:
          )
            @messaging_api_api_client.validate_reply(
              validate_message_request: validate_message_request
            )
          end

          # Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/validate/batch</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_batch_request [RichMenuBatchRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-batch-control-rich-menus-request
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def validate_rich_menu_batch_request_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_batch_request:
          )
            @messaging_api_api_client.validate_rich_menu_batch_request_with_http_info(
              rich_menu_batch_request: rich_menu_batch_request
            )
          end

          # Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/validate/batch</code>
          # When you want to get HTTP status code or response headers, use {#validate_rich_menu_batch_request_with_http_info} instead of this.
          #
          # @param rich_menu_batch_request [RichMenuBatchRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-batch-control-rich-menus-request
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def validate_rich_menu_batch_request(
            rich_menu_batch_request:
          )
            @messaging_api_api_client.validate_rich_menu_batch_request(
              rich_menu_batch_request: rich_menu_batch_request
            )
          end

          # Validate rich menu object
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/validate</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param rich_menu_request [RichMenuRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-rich-menu-object
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def validate_rich_menu_object_with_http_info( # steep:ignore MethodBodyTypeMismatch
            rich_menu_request:
          )
            @messaging_api_api_client.validate_rich_menu_object_with_http_info(
              rich_menu_request: rich_menu_request
            )
          end

          # Validate rich menu object
          # This requests to <code>POST https://api.line.me/v2/bot/richmenu/validate</code>
          # When you want to get HTTP status code or response headers, use {#validate_rich_menu_object_with_http_info} instead of this.
          #
          # @param rich_menu_request [RichMenuRequest]
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-rich-menu-object
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def validate_rich_menu_object(
            rich_menu_request:
          )
            @messaging_api_api_client.validate_rich_menu_object(
              rich_menu_request: rich_menu_request
            )
          end

          # If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel.
          # This requests to <code>POST https://api.line.me/v2/bot/chat/{chatId}/control/acquire</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param chat_id [String] The `userId`, `roomId`, or `groupId`
          # @param acquire_chat_control_request [AcquireChatControlRequest, nil]
          # @see https://developers.line.biz/en/reference/partner-docs/#acquire-control-api
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def acquire_chat_control_with_http_info( # steep:ignore MethodBodyTypeMismatch
            chat_id:,
            acquire_chat_control_request: nil
          )
            @module_api_client.acquire_chat_control_with_http_info(
              chat_id: chat_id,
              acquire_chat_control_request: acquire_chat_control_request
            )
          end

          # If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel.
          # This requests to <code>POST https://api.line.me/v2/bot/chat/{chatId}/control/acquire</code>
          # When you want to get HTTP status code or response headers, use {#acquire_chat_control_with_http_info} instead of this.
          #
          # @param chat_id [String] The `userId`, `roomId`, or `groupId`
          # @param acquire_chat_control_request [AcquireChatControlRequest, nil]
          # @see https://developers.line.biz/en/reference/partner-docs/#acquire-control-api
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def acquire_chat_control(
            chat_id:,
            acquire_chat_control_request: nil
          )
            @module_api_client.acquire_chat_control(
              chat_id: chat_id,
              acquire_chat_control_request: acquire_chat_control_request
            )
          end

          # The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
          # This requests to <code>POST https://api.line.me/v2/bot/channel/detach</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param detach_module_request [DetachModuleRequest, nil]
          # @see https://developers.line.biz/en/reference/partner-docs/#unlink-detach-module-channel-by-operation-mc-admin
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def detach_module_with_http_info( # steep:ignore MethodBodyTypeMismatch
            detach_module_request: nil
          )
            @module_api_client.detach_module_with_http_info(
              detach_module_request: detach_module_request
            )
          end

          # The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
          # This requests to <code>POST https://api.line.me/v2/bot/channel/detach</code>
          # When you want to get HTTP status code or response headers, use {#detach_module_with_http_info} instead of this.
          #
          # @param detach_module_request [DetachModuleRequest, nil]
          # @see https://developers.line.biz/en/reference/partner-docs/#unlink-detach-module-channel-by-operation-mc-admin
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def detach_module(
            detach_module_request: nil
          )
            @module_api_client.detach_module(
              detach_module_request: detach_module_request
            )
          end

          # Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
          # This requests to <code>GET https://api.line.me/v2/bot/list</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param start [String, nil] Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all basic information about the bots in one request, include this parameter to get the remaining array.
          # @param limit [Integer, nil] Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100
          # @see https://developers.line.biz/en/reference/partner-docs/#get-multiple-bot-info-api
          # @return [Array(Line::Bot::V2::Module::GetModulesResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def get_modules_with_http_info( # steep:ignore MethodBodyTypeMismatch
            start: nil,
            limit: nil
          )
            @module_api_client.get_modules_with_http_info(
              start: start,
              limit: limit
            )
          end

          # Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
          # This requests to <code>GET https://api.line.me/v2/bot/list</code>
          # When you want to get HTTP status code or response headers, use {#get_modules_with_http_info} instead of this.
          #
          # @param start [String, nil] Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all basic information about the bots in one request, include this parameter to get the remaining array.
          # @param limit [Integer, nil] Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100
          # @see https://developers.line.biz/en/reference/partner-docs/#get-multiple-bot-info-api
          # @return [Line::Bot::V2::Module::GetModulesResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def get_modules(
            start: nil,
            limit: nil
          )
            @module_api_client.get_modules(
              start: start,
              limit: limit
            )
          end

          # To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API.
          # This requests to <code>POST https://api.line.me/v2/bot/chat/{chatId}/control/release</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param chat_id [String] The `userId`, `roomId`, or `groupId`
          # @see https://developers.line.biz/en/reference/partner-docs/#release-control-api
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def release_chat_control_with_http_info( # steep:ignore MethodBodyTypeMismatch
            chat_id:
          )
            @module_api_client.release_chat_control_with_http_info(
              chat_id: chat_id
            )
          end

          # To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API.
          # This requests to <code>POST https://api.line.me/v2/bot/chat/{chatId}/control/release</code>
          # When you want to get HTTP status code or response headers, use {#release_chat_control_with_http_info} instead of this.
          #
          # @param chat_id [String] The `userId`, `roomId`, or `groupId`
          # @see https://developers.line.biz/en/reference/partner-docs/#release-control-api
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def release_chat_control(
            chat_id:
          )
            @module_api_client.release_chat_control(
              chat_id: chat_id
            )
          end

          # Attach by operation of the module channel provider
          # This requests to <code>POST https://manager.line.biz/module/auth/v1/token</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param grant_type [String] authorization_code
          # @param code [String] Authorization code received from the LINE Platform.
          # @param redirect_uri [String] Specify the redirect_uri specified in the URL for authentication and authorization.
          # @param code_verifier [String, nil] Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks.
          # @param client_id [String, nil] Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.
          # @param client_secret [String, nil] Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.
          # @param region [String, nil] If you specified a value for region in the URL for authentication and authorization, specify the same value.
          # @param basic_search_id [String, nil] If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value.
          # @param scope [String, nil] If you specified a value for scope in the URL for authentication and authorization, specify the same value.
          # @param brand_type [String, nil] If you specified a value for brand_type in the URL for authentication and authorization, specify the same value.
          # @see https://developers.line.biz/en/reference/partner-docs/#link-attach-by-operation-module-channel-provider
          # @return [Array(Line::Bot::V2::ModuleAttach::AttachModuleResponse, Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def attach_module_with_http_info( # steep:ignore MethodBodyTypeMismatch
            grant_type:,
            code:,
            redirect_uri:,
            code_verifier: nil,
            client_id: nil,
            client_secret: nil,
            region: nil,
            basic_search_id: nil,
            scope: nil,
            brand_type: nil
          )
            @module_attach_api_client.attach_module_with_http_info(
              grant_type: grant_type,
              code: code,
              redirect_uri: redirect_uri,
              code_verifier: code_verifier,
              client_id: client_id,
              client_secret: client_secret,
              region: region,
              basic_search_id: basic_search_id,
              scope: scope,
              brand_type: brand_type
            )
          end

          # Attach by operation of the module channel provider
          # This requests to <code>POST https://manager.line.biz/module/auth/v1/token</code>
          # When you want to get HTTP status code or response headers, use {#attach_module_with_http_info} instead of this.
          #
          # @param grant_type [String] authorization_code
          # @param code [String] Authorization code received from the LINE Platform.
          # @param redirect_uri [String] Specify the redirect_uri specified in the URL for authentication and authorization.
          # @param code_verifier [String, nil] Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks.
          # @param client_id [String, nil] Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.
          # @param client_secret [String, nil] Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.
          # @param region [String, nil] If you specified a value for region in the URL for authentication and authorization, specify the same value.
          # @param basic_search_id [String, nil] If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value.
          # @param scope [String, nil] If you specified a value for scope in the URL for authentication and authorization, specify the same value.
          # @param brand_type [String, nil] If you specified a value for brand_type in the URL for authentication and authorization, specify the same value.
          # @see https://developers.line.biz/en/reference/partner-docs/#link-attach-by-operation-module-channel-provider
          # @return [Line::Bot::V2::ModuleAttach::AttachModuleResponse] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def attach_module(
            grant_type:,
            code:,
            redirect_uri:,
            code_verifier: nil,
            client_id: nil,
            client_secret: nil,
            region: nil,
            basic_search_id: nil,
            scope: nil,
            brand_type: nil
          )
            @module_attach_api_client.attach_module(
              grant_type: grant_type,
              code: code,
              redirect_uri: redirect_uri,
              code_verifier: code_verifier,
              client_id: client_id,
              client_secret: client_secret,
              region: region,
              basic_search_id: basic_search_id,
              scope: scope,
              brand_type: brand_type
            )
          end

          # Sends a mission sticker.
          # This requests to <code>POST https://api.line.me/shop/v3/mission</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          # @param mission_sticker_request [MissionStickerRequest]
          # @see https://developers.line.biz/en/reference/partner-docs/#send-mission-stickers-v3
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is 200
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          def mission_sticker_v3_with_http_info( # steep:ignore MethodBodyTypeMismatch
            mission_sticker_request:
          )
            @shop_api_client.mission_sticker_v3_with_http_info(
              mission_sticker_request: mission_sticker_request
            )
          end

          # Sends a mission sticker.
          # This requests to <code>POST https://api.line.me/shop/v3/mission</code>
          # When you want to get HTTP status code or response headers, use {#mission_sticker_v3_with_http_info} instead of this.
          #
          # @param mission_sticker_request [MissionStickerRequest]
          # @see https://developers.line.biz/en/reference/partner-docs/#send-mission-stickers-v3
          # @return [String, nil] when HTTP status code is 200
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def mission_sticker_v3(
            mission_sticker_request:
          )
            @shop_api_client.mission_sticker_v3(
              mission_sticker_request: mission_sticker_request
            )
          end

      end
    end
  end
end
